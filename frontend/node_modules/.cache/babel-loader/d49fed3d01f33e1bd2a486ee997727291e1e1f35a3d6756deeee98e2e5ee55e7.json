{"ast":null,"code":"/*!\n * compression\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nvar Negotiator = require('negotiator');\nvar Buffer = require('safe-buffer').Buffer;\nvar bytes = require('bytes');\nvar compressible = require('compressible');\nvar debug = require('debug')('compression');\nvar onHeaders = require('on-headers');\nvar vary = require('vary');\nvar zlib = require('zlib');\n\n/**\n * Module exports.\n */\n\nmodule.exports = compression;\nmodule.exports.filter = shouldCompress;\n\n/**\n * @const\n * whether current node version has brotli support\n */\nvar hasBrotliSupport = 'createBrotliCompress' in zlib;\n\n/**\n * Module variables.\n * @private\n */\nvar cacheControlNoTransformRegExp = /(?:^|,)\\s*?no-transform\\s*?(?:,|$)/;\nvar SUPPORTED_ENCODING = hasBrotliSupport ? ['br', 'gzip', 'deflate', 'identity'] : ['gzip', 'deflate', 'identity'];\nvar PREFERRED_ENCODING = hasBrotliSupport ? ['br', 'gzip'] : ['gzip'];\nvar encodingSupported = ['gzip', 'deflate', 'identity', 'br'];\n\n/**\n * Compress response data with gzip / deflate.\n *\n * @param {Object} [options]\n * @return {Function} middleware\n * @public\n */\n\nfunction compression(options) {\n  var opts = options || {};\n  var optsBrotli = {};\n  if (hasBrotliSupport) {\n    Object.assign(optsBrotli, opts.brotli);\n    var brotliParams = {};\n    brotliParams[zlib.constants.BROTLI_PARAM_QUALITY] = 4;\n\n    // set the default level to a reasonable value with balanced speed/ratio\n    optsBrotli.params = Object.assign(brotliParams, optsBrotli.params);\n  }\n\n  // options\n  var filter = opts.filter || shouldCompress;\n  var threshold = bytes.parse(opts.threshold);\n  var enforceEncoding = opts.enforceEncoding || 'identity';\n  if (threshold == null) {\n    threshold = 1024;\n  }\n  return function compression(req, res, next) {\n    var ended = false;\n    var length;\n    var listeners = [];\n    var stream;\n    var _end = res.end;\n    var _on = res.on;\n    var _write = res.write;\n\n    // flush\n    res.flush = function flush() {\n      if (stream) {\n        stream.flush();\n      }\n    };\n\n    // proxy\n\n    res.write = function write(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n      if (!headersSent(res)) {\n        this.writeHead(this.statusCode);\n      }\n      return stream ? stream.write(toBuffer(chunk, encoding)) : _write.call(this, chunk, encoding);\n    };\n    res.end = function end(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n      if (!headersSent(res)) {\n        // estimate the length\n        if (!this.getHeader('Content-Length')) {\n          length = chunkLength(chunk, encoding);\n        }\n        this.writeHead(this.statusCode);\n      }\n      if (!stream) {\n        return _end.call(this, chunk, encoding);\n      }\n\n      // mark ended\n      ended = true;\n\n      // write Buffer for Node.js 0.8\n      return chunk ? stream.end(toBuffer(chunk, encoding)) : stream.end();\n    };\n    res.on = function on(type, listener) {\n      if (!listeners || type !== 'drain') {\n        return _on.call(this, type, listener);\n      }\n      if (stream) {\n        return stream.on(type, listener);\n      }\n\n      // buffer listeners for future stream\n      listeners.push([type, listener]);\n      return this;\n    };\n    function nocompress(msg) {\n      debug('no compression: %s', msg);\n      addListeners(res, _on, listeners);\n      listeners = null;\n    }\n    onHeaders(res, function onResponseHeaders() {\n      // determine if request is filtered\n      if (!filter(req, res)) {\n        nocompress('filtered');\n        return;\n      }\n\n      // determine if the entity should be transformed\n      if (!shouldTransform(req, res)) {\n        nocompress('no transform');\n        return;\n      }\n\n      // vary\n      vary(res, 'Accept-Encoding');\n\n      // content-length below threshold\n      if (Number(res.getHeader('Content-Length')) < threshold || length < threshold) {\n        nocompress('size below threshold');\n        return;\n      }\n      var encoding = res.getHeader('Content-Encoding') || 'identity';\n\n      // already encoded\n      if (encoding !== 'identity') {\n        nocompress('already encoded');\n        return;\n      }\n\n      // head\n      if (req.method === 'HEAD') {\n        nocompress('HEAD request');\n        return;\n      }\n\n      // compression method\n      var negotiator = new Negotiator(req);\n      var method = negotiator.encoding(SUPPORTED_ENCODING, PREFERRED_ENCODING);\n\n      // if no method is found, use the default encoding\n      if (!req.headers['accept-encoding'] && encodingSupported.indexOf(enforceEncoding) !== -1) {\n        method = enforceEncoding;\n      }\n\n      // negotiation failed\n      if (!method || method === 'identity') {\n        nocompress('not acceptable');\n        return;\n      }\n\n      // compression stream\n      debug('%s compression', method);\n      stream = method === 'gzip' ? zlib.createGzip(opts) : method === 'br' ? zlib.createBrotliCompress(optsBrotli) : zlib.createDeflate(opts);\n\n      // add buffered listeners to stream\n      addListeners(stream, stream.on, listeners);\n\n      // header fields\n      res.setHeader('Content-Encoding', method);\n      res.removeHeader('Content-Length');\n\n      // compression\n      stream.on('data', function onStreamData(chunk) {\n        if (_write.call(res, chunk) === false) {\n          stream.pause();\n        }\n      });\n      stream.on('end', function onStreamEnd() {\n        _end.call(res);\n      });\n      _on.call(res, 'drain', function onResponseDrain() {\n        stream.resume();\n      });\n    });\n    next();\n  };\n}\n\n/**\n * Add bufferred listeners to stream\n * @private\n */\n\nfunction addListeners(stream, on, listeners) {\n  for (var i = 0; i < listeners.length; i++) {\n    on.apply(stream, listeners[i]);\n  }\n}\n\n/**\n * Get the length of a given chunk\n */\n\nfunction chunkLength(chunk, encoding) {\n  if (!chunk) {\n    return 0;\n  }\n  return Buffer.isBuffer(chunk) ? chunk.length : Buffer.byteLength(chunk, encoding);\n}\n\n/**\n * Default filter function.\n * @private\n */\n\nfunction shouldCompress(req, res) {\n  var type = res.getHeader('Content-Type');\n  if (type === undefined || !compressible(type)) {\n    debug('%s not compressible', type);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Determine if the entity should be transformed.\n * @private\n */\n\nfunction shouldTransform(req, res) {\n  var cacheControl = res.getHeader('Cache-Control');\n\n  // Don't compress for Cache-Control: no-transform\n  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4\n  return !cacheControl || !cacheControlNoTransformRegExp.test(cacheControl);\n}\n\n/**\n * Coerce arguments to Buffer\n * @private\n */\n\nfunction toBuffer(chunk, encoding) {\n  return Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n}\n\n/**\n * Determine if the response headers have been sent.\n *\n * @param {object} res\n * @returns {boolean}\n * @private\n */\n\nfunction headersSent(res) {\n  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent;\n}","map":{"version":3,"names":["Negotiator","require","Buffer","bytes","compressible","debug","onHeaders","vary","zlib","module","exports","compression","filter","shouldCompress","hasBrotliSupport","cacheControlNoTransformRegExp","SUPPORTED_ENCODING","PREFERRED_ENCODING","encodingSupported","options","opts","optsBrotli","Object","assign","brotli","brotliParams","constants","BROTLI_PARAM_QUALITY","params","threshold","parse","enforceEncoding","req","res","next","ended","length","listeners","stream","_end","end","_on","on","_write","write","flush","chunk","encoding","headersSent","writeHead","statusCode","toBuffer","call","getHeader","chunkLength","type","listener","push","nocompress","msg","addListeners","onResponseHeaders","shouldTransform","Number","method","negotiator","headers","indexOf","createGzip","createBrotliCompress","createDeflate","setHeader","removeHeader","onStreamData","pause","onStreamEnd","onResponseDrain","resume","i","apply","isBuffer","byteLength","undefined","cacheControl","test","from","Boolean","_header"],"sources":["D:/project19/frontend/node_modules/compression/index.js"],"sourcesContent":["/*!\n * compression\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Negotiator = require('negotiator')\nvar Buffer = require('safe-buffer').Buffer\nvar bytes = require('bytes')\nvar compressible = require('compressible')\nvar debug = require('debug')('compression')\nvar onHeaders = require('on-headers')\nvar vary = require('vary')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = compression\nmodule.exports.filter = shouldCompress\n\n/**\n * @const\n * whether current node version has brotli support\n */\nvar hasBrotliSupport = 'createBrotliCompress' in zlib\n\n/**\n * Module variables.\n * @private\n */\nvar cacheControlNoTransformRegExp = /(?:^|,)\\s*?no-transform\\s*?(?:,|$)/\nvar SUPPORTED_ENCODING = hasBrotliSupport ? ['br', 'gzip', 'deflate', 'identity'] : ['gzip', 'deflate', 'identity']\nvar PREFERRED_ENCODING = hasBrotliSupport ? ['br', 'gzip'] : ['gzip']\n\nvar encodingSupported = ['gzip', 'deflate', 'identity', 'br']\n\n/**\n * Compress response data with gzip / deflate.\n *\n * @param {Object} [options]\n * @return {Function} middleware\n * @public\n */\n\nfunction compression (options) {\n  var opts = options || {}\n  var optsBrotli = {}\n\n  if (hasBrotliSupport) {\n    Object.assign(optsBrotli, opts.brotli)\n\n    var brotliParams = {}\n    brotliParams[zlib.constants.BROTLI_PARAM_QUALITY] = 4\n\n    // set the default level to a reasonable value with balanced speed/ratio\n    optsBrotli.params = Object.assign(brotliParams, optsBrotli.params)\n  }\n\n  // options\n  var filter = opts.filter || shouldCompress\n  var threshold = bytes.parse(opts.threshold)\n  var enforceEncoding = opts.enforceEncoding || 'identity'\n\n  if (threshold == null) {\n    threshold = 1024\n  }\n\n  return function compression (req, res, next) {\n    var ended = false\n    var length\n    var listeners = []\n    var stream\n\n    var _end = res.end\n    var _on = res.on\n    var _write = res.write\n\n    // flush\n    res.flush = function flush () {\n      if (stream) {\n        stream.flush()\n      }\n    }\n\n    // proxy\n\n    res.write = function write (chunk, encoding) {\n      if (ended) {\n        return false\n      }\n\n      if (!headersSent(res)) {\n        this.writeHead(this.statusCode)\n      }\n\n      return stream\n        ? stream.write(toBuffer(chunk, encoding))\n        : _write.call(this, chunk, encoding)\n    }\n\n    res.end = function end (chunk, encoding) {\n      if (ended) {\n        return false\n      }\n\n      if (!headersSent(res)) {\n        // estimate the length\n        if (!this.getHeader('Content-Length')) {\n          length = chunkLength(chunk, encoding)\n        }\n\n        this.writeHead(this.statusCode)\n      }\n\n      if (!stream) {\n        return _end.call(this, chunk, encoding)\n      }\n\n      // mark ended\n      ended = true\n\n      // write Buffer for Node.js 0.8\n      return chunk\n        ? stream.end(toBuffer(chunk, encoding))\n        : stream.end()\n    }\n\n    res.on = function on (type, listener) {\n      if (!listeners || type !== 'drain') {\n        return _on.call(this, type, listener)\n      }\n\n      if (stream) {\n        return stream.on(type, listener)\n      }\n\n      // buffer listeners for future stream\n      listeners.push([type, listener])\n\n      return this\n    }\n\n    function nocompress (msg) {\n      debug('no compression: %s', msg)\n      addListeners(res, _on, listeners)\n      listeners = null\n    }\n\n    onHeaders(res, function onResponseHeaders () {\n      // determine if request is filtered\n      if (!filter(req, res)) {\n        nocompress('filtered')\n        return\n      }\n\n      // determine if the entity should be transformed\n      if (!shouldTransform(req, res)) {\n        nocompress('no transform')\n        return\n      }\n\n      // vary\n      vary(res, 'Accept-Encoding')\n\n      // content-length below threshold\n      if (Number(res.getHeader('Content-Length')) < threshold || length < threshold) {\n        nocompress('size below threshold')\n        return\n      }\n\n      var encoding = res.getHeader('Content-Encoding') || 'identity'\n\n      // already encoded\n      if (encoding !== 'identity') {\n        nocompress('already encoded')\n        return\n      }\n\n      // head\n      if (req.method === 'HEAD') {\n        nocompress('HEAD request')\n        return\n      }\n\n      // compression method\n      var negotiator = new Negotiator(req)\n      var method = negotiator.encoding(SUPPORTED_ENCODING, PREFERRED_ENCODING)\n\n      // if no method is found, use the default encoding\n      if (!req.headers['accept-encoding'] && encodingSupported.indexOf(enforceEncoding) !== -1) {\n        method = enforceEncoding\n      }\n\n      // negotiation failed\n      if (!method || method === 'identity') {\n        nocompress('not acceptable')\n        return\n      }\n\n      // compression stream\n      debug('%s compression', method)\n      stream = method === 'gzip'\n        ? zlib.createGzip(opts)\n        : method === 'br'\n          ? zlib.createBrotliCompress(optsBrotli)\n          : zlib.createDeflate(opts)\n\n      // add buffered listeners to stream\n      addListeners(stream, stream.on, listeners)\n\n      // header fields\n      res.setHeader('Content-Encoding', method)\n      res.removeHeader('Content-Length')\n\n      // compression\n      stream.on('data', function onStreamData (chunk) {\n        if (_write.call(res, chunk) === false) {\n          stream.pause()\n        }\n      })\n\n      stream.on('end', function onStreamEnd () {\n        _end.call(res)\n      })\n\n      _on.call(res, 'drain', function onResponseDrain () {\n        stream.resume()\n      })\n    })\n\n    next()\n  }\n}\n\n/**\n * Add bufferred listeners to stream\n * @private\n */\n\nfunction addListeners (stream, on, listeners) {\n  for (var i = 0; i < listeners.length; i++) {\n    on.apply(stream, listeners[i])\n  }\n}\n\n/**\n * Get the length of a given chunk\n */\n\nfunction chunkLength (chunk, encoding) {\n  if (!chunk) {\n    return 0\n  }\n\n  return Buffer.isBuffer(chunk)\n    ? chunk.length\n    : Buffer.byteLength(chunk, encoding)\n}\n\n/**\n * Default filter function.\n * @private\n */\n\nfunction shouldCompress (req, res) {\n  var type = res.getHeader('Content-Type')\n\n  if (type === undefined || !compressible(type)) {\n    debug('%s not compressible', type)\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determine if the entity should be transformed.\n * @private\n */\n\nfunction shouldTransform (req, res) {\n  var cacheControl = res.getHeader('Cache-Control')\n\n  // Don't compress for Cache-Control: no-transform\n  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4\n  return !cacheControl ||\n    !cacheControlNoTransformRegExp.test(cacheControl)\n}\n\n/**\n * Coerce arguments to Buffer\n * @private\n */\n\nfunction toBuffer (chunk, encoding) {\n  return Buffer.isBuffer(chunk)\n    ? chunk\n    : Buffer.from(chunk, encoding)\n}\n\n/**\n * Determine if the response headers have been sent.\n *\n * @param {object} res\n * @returns {boolean}\n * @private\n */\n\nfunction headersSent (res) {\n  return typeof res.headersSent !== 'boolean'\n    ? Boolean(res._header)\n    : res.headersSent\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,YAAY,CAAC;AACtC,IAAIC,MAAM,GAAGD,OAAO,CAAC,aAAa,CAAC,CAACC,MAAM;AAC1C,IAAIC,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIG,YAAY,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC1C,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC,CAAC,aAAa,CAAC;AAC3C,IAAIK,SAAS,GAAGL,OAAO,CAAC,YAAY,CAAC;AACrC,IAAIM,IAAI,GAAGN,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIO,IAAI,GAAGP,OAAO,CAAC,MAAM,CAAC;;AAE1B;AACA;AACA;;AAEAQ,MAAM,CAACC,OAAO,GAAGC,WAAW;AAC5BF,MAAM,CAACC,OAAO,CAACE,MAAM,GAAGC,cAAc;;AAEtC;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,sBAAsB,IAAIN,IAAI;;AAErD;AACA;AACA;AACA;AACA,IAAIO,6BAA6B,GAAG,oCAAoC;AACxE,IAAIC,kBAAkB,GAAGF,gBAAgB,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC;AACnH,IAAIG,kBAAkB,GAAGH,gBAAgB,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;AAErE,IAAII,iBAAiB,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASP,WAAWA,CAAEQ,OAAO,EAAE;EAC7B,IAAIC,IAAI,GAAGD,OAAO,IAAI,CAAC,CAAC;EACxB,IAAIE,UAAU,GAAG,CAAC,CAAC;EAEnB,IAAIP,gBAAgB,EAAE;IACpBQ,MAAM,CAACC,MAAM,CAACF,UAAU,EAAED,IAAI,CAACI,MAAM,CAAC;IAEtC,IAAIC,YAAY,GAAG,CAAC,CAAC;IACrBA,YAAY,CAACjB,IAAI,CAACkB,SAAS,CAACC,oBAAoB,CAAC,GAAG,CAAC;;IAErD;IACAN,UAAU,CAACO,MAAM,GAAGN,MAAM,CAACC,MAAM,CAACE,YAAY,EAAEJ,UAAU,CAACO,MAAM,CAAC;EACpE;;EAEA;EACA,IAAIhB,MAAM,GAAGQ,IAAI,CAACR,MAAM,IAAIC,cAAc;EAC1C,IAAIgB,SAAS,GAAG1B,KAAK,CAAC2B,KAAK,CAACV,IAAI,CAACS,SAAS,CAAC;EAC3C,IAAIE,eAAe,GAAGX,IAAI,CAACW,eAAe,IAAI,UAAU;EAExD,IAAIF,SAAS,IAAI,IAAI,EAAE;IACrBA,SAAS,GAAG,IAAI;EAClB;EAEA,OAAO,SAASlB,WAAWA,CAAEqB,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAE;IAC3C,IAAIC,KAAK,GAAG,KAAK;IACjB,IAAIC,MAAM;IACV,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,MAAM;IAEV,IAAIC,IAAI,GAAGN,GAAG,CAACO,GAAG;IAClB,IAAIC,GAAG,GAAGR,GAAG,CAACS,EAAE;IAChB,IAAIC,MAAM,GAAGV,GAAG,CAACW,KAAK;;IAEtB;IACAX,GAAG,CAACY,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAI;MAC5B,IAAIP,MAAM,EAAE;QACVA,MAAM,CAACO,KAAK,CAAC,CAAC;MAChB;IACF,CAAC;;IAED;;IAEAZ,GAAG,CAACW,KAAK,GAAG,SAASA,KAAKA,CAAEE,KAAK,EAAEC,QAAQ,EAAE;MAC3C,IAAIZ,KAAK,EAAE;QACT,OAAO,KAAK;MACd;MAEA,IAAI,CAACa,WAAW,CAACf,GAAG,CAAC,EAAE;QACrB,IAAI,CAACgB,SAAS,CAAC,IAAI,CAACC,UAAU,CAAC;MACjC;MAEA,OAAOZ,MAAM,GACTA,MAAM,CAACM,KAAK,CAACO,QAAQ,CAACL,KAAK,EAAEC,QAAQ,CAAC,CAAC,GACvCJ,MAAM,CAACS,IAAI,CAAC,IAAI,EAAEN,KAAK,EAAEC,QAAQ,CAAC;IACxC,CAAC;IAEDd,GAAG,CAACO,GAAG,GAAG,SAASA,GAAGA,CAAEM,KAAK,EAAEC,QAAQ,EAAE;MACvC,IAAIZ,KAAK,EAAE;QACT,OAAO,KAAK;MACd;MAEA,IAAI,CAACa,WAAW,CAACf,GAAG,CAAC,EAAE;QACrB;QACA,IAAI,CAAC,IAAI,CAACoB,SAAS,CAAC,gBAAgB,CAAC,EAAE;UACrCjB,MAAM,GAAGkB,WAAW,CAACR,KAAK,EAAEC,QAAQ,CAAC;QACvC;QAEA,IAAI,CAACE,SAAS,CAAC,IAAI,CAACC,UAAU,CAAC;MACjC;MAEA,IAAI,CAACZ,MAAM,EAAE;QACX,OAAOC,IAAI,CAACa,IAAI,CAAC,IAAI,EAAEN,KAAK,EAAEC,QAAQ,CAAC;MACzC;;MAEA;MACAZ,KAAK,GAAG,IAAI;;MAEZ;MACA,OAAOW,KAAK,GACRR,MAAM,CAACE,GAAG,CAACW,QAAQ,CAACL,KAAK,EAAEC,QAAQ,CAAC,CAAC,GACrCT,MAAM,CAACE,GAAG,CAAC,CAAC;IAClB,CAAC;IAEDP,GAAG,CAACS,EAAE,GAAG,SAASA,EAAEA,CAAEa,IAAI,EAAEC,QAAQ,EAAE;MACpC,IAAI,CAACnB,SAAS,IAAIkB,IAAI,KAAK,OAAO,EAAE;QAClC,OAAOd,GAAG,CAACW,IAAI,CAAC,IAAI,EAAEG,IAAI,EAAEC,QAAQ,CAAC;MACvC;MAEA,IAAIlB,MAAM,EAAE;QACV,OAAOA,MAAM,CAACI,EAAE,CAACa,IAAI,EAAEC,QAAQ,CAAC;MAClC;;MAEA;MACAnB,SAAS,CAACoB,IAAI,CAAC,CAACF,IAAI,EAAEC,QAAQ,CAAC,CAAC;MAEhC,OAAO,IAAI;IACb,CAAC;IAED,SAASE,UAAUA,CAAEC,GAAG,EAAE;MACxBtD,KAAK,CAAC,oBAAoB,EAAEsD,GAAG,CAAC;MAChCC,YAAY,CAAC3B,GAAG,EAAEQ,GAAG,EAAEJ,SAAS,CAAC;MACjCA,SAAS,GAAG,IAAI;IAClB;IAEA/B,SAAS,CAAC2B,GAAG,EAAE,SAAS4B,iBAAiBA,CAAA,EAAI;MAC3C;MACA,IAAI,CAACjD,MAAM,CAACoB,GAAG,EAAEC,GAAG,CAAC,EAAE;QACrByB,UAAU,CAAC,UAAU,CAAC;QACtB;MACF;;MAEA;MACA,IAAI,CAACI,eAAe,CAAC9B,GAAG,EAAEC,GAAG,CAAC,EAAE;QAC9ByB,UAAU,CAAC,cAAc,CAAC;QAC1B;MACF;;MAEA;MACAnD,IAAI,CAAC0B,GAAG,EAAE,iBAAiB,CAAC;;MAE5B;MACA,IAAI8B,MAAM,CAAC9B,GAAG,CAACoB,SAAS,CAAC,gBAAgB,CAAC,CAAC,GAAGxB,SAAS,IAAIO,MAAM,GAAGP,SAAS,EAAE;QAC7E6B,UAAU,CAAC,sBAAsB,CAAC;QAClC;MACF;MAEA,IAAIX,QAAQ,GAAGd,GAAG,CAACoB,SAAS,CAAC,kBAAkB,CAAC,IAAI,UAAU;;MAE9D;MACA,IAAIN,QAAQ,KAAK,UAAU,EAAE;QAC3BW,UAAU,CAAC,iBAAiB,CAAC;QAC7B;MACF;;MAEA;MACA,IAAI1B,GAAG,CAACgC,MAAM,KAAK,MAAM,EAAE;QACzBN,UAAU,CAAC,cAAc,CAAC;QAC1B;MACF;;MAEA;MACA,IAAIO,UAAU,GAAG,IAAIjE,UAAU,CAACgC,GAAG,CAAC;MACpC,IAAIgC,MAAM,GAAGC,UAAU,CAAClB,QAAQ,CAAC/B,kBAAkB,EAAEC,kBAAkB,CAAC;;MAExE;MACA,IAAI,CAACe,GAAG,CAACkC,OAAO,CAAC,iBAAiB,CAAC,IAAIhD,iBAAiB,CAACiD,OAAO,CAACpC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;QACxFiC,MAAM,GAAGjC,eAAe;MAC1B;;MAEA;MACA,IAAI,CAACiC,MAAM,IAAIA,MAAM,KAAK,UAAU,EAAE;QACpCN,UAAU,CAAC,gBAAgB,CAAC;QAC5B;MACF;;MAEA;MACArD,KAAK,CAAC,gBAAgB,EAAE2D,MAAM,CAAC;MAC/B1B,MAAM,GAAG0B,MAAM,KAAK,MAAM,GACtBxD,IAAI,CAAC4D,UAAU,CAAChD,IAAI,CAAC,GACrB4C,MAAM,KAAK,IAAI,GACbxD,IAAI,CAAC6D,oBAAoB,CAAChD,UAAU,CAAC,GACrCb,IAAI,CAAC8D,aAAa,CAAClD,IAAI,CAAC;;MAE9B;MACAwC,YAAY,CAACtB,MAAM,EAAEA,MAAM,CAACI,EAAE,EAAEL,SAAS,CAAC;;MAE1C;MACAJ,GAAG,CAACsC,SAAS,CAAC,kBAAkB,EAAEP,MAAM,CAAC;MACzC/B,GAAG,CAACuC,YAAY,CAAC,gBAAgB,CAAC;;MAElC;MACAlC,MAAM,CAACI,EAAE,CAAC,MAAM,EAAE,SAAS+B,YAAYA,CAAE3B,KAAK,EAAE;QAC9C,IAAIH,MAAM,CAACS,IAAI,CAACnB,GAAG,EAAEa,KAAK,CAAC,KAAK,KAAK,EAAE;UACrCR,MAAM,CAACoC,KAAK,CAAC,CAAC;QAChB;MACF,CAAC,CAAC;MAEFpC,MAAM,CAACI,EAAE,CAAC,KAAK,EAAE,SAASiC,WAAWA,CAAA,EAAI;QACvCpC,IAAI,CAACa,IAAI,CAACnB,GAAG,CAAC;MAChB,CAAC,CAAC;MAEFQ,GAAG,CAACW,IAAI,CAACnB,GAAG,EAAE,OAAO,EAAE,SAAS2C,eAAeA,CAAA,EAAI;QACjDtC,MAAM,CAACuC,MAAM,CAAC,CAAC;MACjB,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF3C,IAAI,CAAC,CAAC;EACR,CAAC;AACH;;AAEA;AACA;AACA;AACA;;AAEA,SAAS0B,YAAYA,CAAEtB,MAAM,EAAEI,EAAE,EAAEL,SAAS,EAAE;EAC5C,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzC,SAAS,CAACD,MAAM,EAAE0C,CAAC,EAAE,EAAE;IACzCpC,EAAE,CAACqC,KAAK,CAACzC,MAAM,EAAED,SAAS,CAACyC,CAAC,CAAC,CAAC;EAChC;AACF;;AAEA;AACA;AACA;;AAEA,SAASxB,WAAWA,CAAER,KAAK,EAAEC,QAAQ,EAAE;EACrC,IAAI,CAACD,KAAK,EAAE;IACV,OAAO,CAAC;EACV;EAEA,OAAO5C,MAAM,CAAC8E,QAAQ,CAAClC,KAAK,CAAC,GACzBA,KAAK,CAACV,MAAM,GACZlC,MAAM,CAAC+E,UAAU,CAACnC,KAAK,EAAEC,QAAQ,CAAC;AACxC;;AAEA;AACA;AACA;AACA;;AAEA,SAASlC,cAAcA,CAAEmB,GAAG,EAAEC,GAAG,EAAE;EACjC,IAAIsB,IAAI,GAAGtB,GAAG,CAACoB,SAAS,CAAC,cAAc,CAAC;EAExC,IAAIE,IAAI,KAAK2B,SAAS,IAAI,CAAC9E,YAAY,CAACmD,IAAI,CAAC,EAAE;IAC7ClD,KAAK,CAAC,qBAAqB,EAAEkD,IAAI,CAAC;IAClC,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb;;AAEA;AACA;AACA;AACA;;AAEA,SAASO,eAAeA,CAAE9B,GAAG,EAAEC,GAAG,EAAE;EAClC,IAAIkD,YAAY,GAAGlD,GAAG,CAACoB,SAAS,CAAC,eAAe,CAAC;;EAEjD;EACA;EACA,OAAO,CAAC8B,YAAY,IAClB,CAACpE,6BAA6B,CAACqE,IAAI,CAACD,YAAY,CAAC;AACrD;;AAEA;AACA;AACA;AACA;;AAEA,SAAShC,QAAQA,CAAEL,KAAK,EAAEC,QAAQ,EAAE;EAClC,OAAO7C,MAAM,CAAC8E,QAAQ,CAAClC,KAAK,CAAC,GACzBA,KAAK,GACL5C,MAAM,CAACmF,IAAI,CAACvC,KAAK,EAAEC,QAAQ,CAAC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,WAAWA,CAAEf,GAAG,EAAE;EACzB,OAAO,OAAOA,GAAG,CAACe,WAAW,KAAK,SAAS,GACvCsC,OAAO,CAACrD,GAAG,CAACsD,OAAO,CAAC,GACpBtD,GAAG,CAACe,WAAW;AACrB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}