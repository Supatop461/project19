{"ast":null,"code":"// backend/routes/publicProducts.js\n// ดึง “สินค้าทั้งหมด” + best-sellers (มีสุ่ม fallback)\n// ✅ ค่าเริ่มต้น: products.limit=60, best-sellers.limit=12\n// ✅ คืนรูปแบบ { items, total } (ยกเว้น /:productId ที่คืน object เดียว)\n\nconst express = require('express');\nlet db;\ntry {\n  db = require('../db');\n} catch {\n  db = require('../db/db');\n}\nconst router = express.Router();\nrouter.get('/_ping', (_req, res) => res.json({\n  ok: true\n}));\n\n/* ----------------- helpers ----------------- */\nfunction toInt(v, def = 0, min = -2147483648, max = 2147483647) {\n  const n = parseInt(v, 10);\n  if (!Number.isFinite(n)) return def;\n  return Math.min(Math.max(n, min), max);\n}\nasync function hasTable(table) {\n  var _rows$;\n  const {\n    rows\n  } = await db.query(`SELECT to_regclass($1) IS NOT NULL AS ok`, [`public.${table}`]);\n  return !!((_rows$ = rows[0]) !== null && _rows$ !== void 0 && _rows$.ok);\n}\nasync function hasColumn(table, col) {\n  const {\n    rows\n  } = await db.query(`\n    SELECT 1 FROM information_schema.columns\n    WHERE table_schema='public' AND table_name=$1 AND column_name=$2\n    LIMIT 1\n  `, [table, col]);\n  return rows.length > 0;\n}\nasync function getSchemaFlags() {\n  const hasPublished = await hasColumn('products', 'published');\n  const hasIsPubProd = await hasColumn('products', 'is_published');\n  const publishedCol = hasPublished ? 'COALESCE(p.published, TRUE)' : hasIsPubProd ? 'COALESCE(p.is_published, TRUE)' : 'TRUE';\n  const hasIsArchived = await hasColumn('products', 'is_archived');\n  const hasArchivedAt = await hasColumn('products', 'archived_at');\n  const archivedFilter = hasIsArchived ? 'COALESCE(p.is_archived,FALSE) = FALSE' : hasArchivedAt ? 'p.archived_at IS NULL' : 'TRUE';\n  const catPub = (await hasColumn('product_categories', 'is_published')) ? 'COALESCE(c.is_published,TRUE) = TRUE' : 'TRUE';\n  const subPub = (await hasColumn('subcategories', 'is_published')) ? 'COALESCE(sc.is_published,TRUE) = TRUE' : 'TRUE';\n  const hasImageUrl = await hasColumn('products', 'image_url');\n  return {\n    publishedCol,\n    archivedFilter,\n    catPub,\n    subPub,\n    hasImageUrl\n  };\n}\nfunction buildSort(sort, {\n  alias = 'p',\n  useView = false,\n  soldCol = 'sold_qty'\n} = {}) {\n  const priceCol = useView ? 'min_price' : `${alias}.selling_price`;\n  switch (String(sort || '').toLowerCase()) {\n    case 'popular':\n      return `${soldCol} DESC NULLS LAST, ${alias}.product_id DESC`;\n    case 'newest':\n      return `${alias}.product_id DESC`;\n    case 'price_asc':\n      return `${priceCol} ASC NULLS LAST, ${alias}.product_id DESC`;\n    case 'price_desc':\n      return `${priceCol} DESC NULLS LAST, ${alias}.product_id DESC`;\n    case 'name_asc':\n      return `${alias}.product_name ASC, ${alias}.product_id DESC`;\n    case 'name_desc':\n      return `${alias}.product_name DESC, ${alias}.product_id DESC`;\n    default:\n      return `${alias}.product_id DESC`;\n  }\n}\nasync function buildSelectGroup({\n  where\n}) {\n  const useView = await hasTable('v_product_variants_live_stock');\n  const hasFinal = useView && (await hasColumn('v_product_variants_live_stock', 'final_price'));\n  const {\n    publishedCol,\n    archivedFilter,\n    catPub,\n    subPub,\n    hasImageUrl\n  } = await getSchemaFlags();\n  const hasSellingPrice = await hasColumn('products', 'selling_price');\n  const hasPriceCol = await hasColumn('products', 'price');\n  const basePriceCol = hasSellingPrice ? 'p.selling_price' : hasPriceCol ? 'p.price' : null;\n  const priceExpr = useView ? hasFinal ? 'MIN(COALESCE(v.price_override, v.final_price))' : 'MIN(v.price_override)' : basePriceCol ? basePriceCol : 'NULL';\n  const stockExpr = useView ? 'COALESCE(SUM(v.stock),0)::int' : '0::int';\n  const select = ['p.product_id', 'p.product_name', 'p.description', `${hasImageUrl ? `COALESCE(NULLIF(p.image_url, ''), cv.cover_url)` : 'cv.cover_url'} AS image_url`, 'p.category_id', 'c.category_name', 'p.subcategory_id', 'sc.subcategory_name', `${priceExpr}::numeric AS min_price`, `${stockExpr} AS stock`, useView ? 'NULL::numeric AS selling_price' : basePriceCol ? `${basePriceCol}::numeric AS selling_price` : 'NULL::numeric AS selling_price'];\n  const groupBy = ['p.product_id', 'p.product_name', 'p.description', hasImageUrl ? 'p.image_url' : null, 'cv.cover_url', 'p.category_id', 'c.category_name', 'p.subcategory_id', 'sc.subcategory_name', !useView && basePriceCol ? basePriceCol : null].filter(Boolean);\n  const joins = [useView ? 'LEFT JOIN v_product_variants_live_stock v ON v.product_id = p.product_id' : null, `LEFT JOIN LATERAL (\n      SELECT MIN(pi.url) AS cover_url\n      FROM product_images pi\n      WHERE pi.product_id = p.product_id\n    ) cv ON TRUE`, 'LEFT JOIN product_categories c ON c.category_id = p.category_id', 'LEFT JOIN subcategories sc     ON sc.subcategory_id = p.subcategory_id'].filter(Boolean);\n  const whereConds = [...where, `(${publishedCol} = TRUE)`, `(${archivedFilter})`, `(${catPub})`, `(${subPub})`];\n  return {\n    useView,\n    select,\n    groupBy,\n    joins,\n    whereConds\n  };\n}\n\n/* =========================================================\r\n * GET /api/products  → { items, total }\r\n * query: featured, category_id, subcategory_id, q, sort, limit, offset, include_archived\r\n * ========================================================= */\nrouter.get('/', async (req, res) => {\n  try {\n    const {\n      featured,\n      category_id,\n      subcategory_id,\n      q,\n      sort = 'newest',\n      limit = 60,\n      // ⭐ default 60\n      offset = 0,\n      include_archived\n    } = req.query || {};\n    const lim = toInt(limit, 60, 1, 500);\n    const off = toInt(offset, 0, 0, 100000);\n    const includeArchived = String(include_archived).toLowerCase() === '1' || String(include_archived).toLowerCase() === 'true';\n    const where = [];\n    const params = [];\n    if (!includeArchived) {\n      const {\n        archivedFilter\n      } = await getSchemaFlags();\n      where.push(archivedFilter);\n    }\n    if (category_id) {\n      params.push(String(category_id));\n      where.push(`p.category_id = $${params.length}`);\n    }\n    if (subcategory_id) {\n      params.push(String(subcategory_id));\n      where.push(`p.subcategory_id = $${params.length}`);\n    }\n    if (q && String(q).trim() !== '') {\n      const qq = `%${String(q).trim()}%`;\n      params.push(qq, qq);\n      where.push(`(p.product_name ILIKE $${params.length - 1} OR p.description ILIKE $${params.length})`);\n    }\n    const wantPopular = String(sort || '').toLowerCase() === 'popular' || String(featured).toLowerCase() === '1' || String(featured).toLowerCase() === 'true';\n    const {\n      useView,\n      select,\n      groupBy,\n      joins,\n      whereConds\n    } = await buildSelectGroup({\n      where\n    });\n    const baseSelectSql = `\n      SELECT\n        ${select.join(',\\n        ')}\n      FROM products p\n      ${joins.join('\\n      ')}\n      ${whereConds.length ? 'WHERE ' + whereConds.join(' AND ') : ''}\n      ${groupBy.length ? 'GROUP BY ' + groupBy.join(', ') : ''}\n    `;\n    let sql, listParams;\n    if (wantPopular) {\n      const soldCTE = `\n        WITH sold AS (\n          SELECT od.product_id, COALESCE(SUM(od.quantity), 0)::int AS sold_qty\n          FROM order_details od\n          LEFT JOIN orders o ON o.order_id = od.order_id\n          WHERE o.order_status_id IN ('o1','o2') -- ✅ ไม่มีช่องว่าง\n          GROUP BY od.product_id\n        )\n      `;\n      sql = `\n        ${soldCTE}\n        SELECT x.*, COALESCE(s.sold_qty, 0) AS sold_qty\n        FROM (\n          ${baseSelectSql}\n        ) x\n        LEFT JOIN sold s ON s.product_id = x.product_id\n        ORDER BY ${buildSort('popular', {\n        alias: 'x',\n        useView,\n        soldCol: 'COALESCE(s.sold_qty, 0)'\n      })}\n        LIMIT $${params.length + 1} OFFSET $${params.length + 2}\n      `;\n      listParams = [...params, lim, off];\n    } else {\n      sql = `\n        ${baseSelectSql}\n        ORDER BY ${buildSort(sort, {\n        alias: 'p',\n        useView\n      })}\n        LIMIT $${params.push(lim)} OFFSET $${params.push(off)}\n      `;\n      listParams = params;\n    }\n    const {\n      rows\n    } = await db.query(sql, listParams);\n    res.json({\n      items: rows,\n      total: rows.length\n    });\n  } catch (err) {\n    console.error('public products list error:', err);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n/* =========================================================\r\n * GET /api/products/best-sellers  → { items, total }  (มีสุ่ม fallback)\r\n * ========================================================= */\nrouter.get('/best-sellers', async (req, res) => {\n  try {\n    const lim = toInt(req.query.limit || req.query.top || req.query.per_page || req.query.pageSize, 12, 1, 50); // ⭐ default 12\n\n    const {\n      useView,\n      select,\n      groupBy,\n      joins,\n      whereConds\n    } = await buildSelectGroup({\n      where: []\n    });\n    const baseSelectSql = `\n      SELECT\n        ${select.join(',\\n        ')}\n      FROM products p\n      ${joins.join('\\n      ')}\n      ${whereConds.length ? 'WHERE ' + whereConds.join(' AND ') : ''}\n      ${groupBy.length ? 'GROUP BY ' + groupBy.join(', ') : ''}\n    `;\n    const sqlPopular = `\n      WITH sold AS (\n        SELECT od.product_id, COALESCE(SUM(od.quantity), 0)::int AS sold_qty\n        FROM order_details od\n        LEFT JOIN orders o ON o.order_id = od.order_id\n        WHERE o.order_status_id IN ('o1','o2')\n        GROUP BY od.product_id\n      )\n      SELECT x.*, COALESCE(s.sold_qty, 0) AS sold_qty\n      FROM (\n        ${baseSelectSql}\n      ) x\n      LEFT JOIN sold s ON s.product_id = x.product_id\n      ORDER BY ${buildSort('popular', {\n      alias: 'x',\n      useView,\n      soldCol: 'COALESCE(s.sold_qty, 0)'\n    })}\n      LIMIT $1\n    `;\n    let {\n      rows\n    } = await db.query(sqlPopular, [lim]);\n    if (!rows.length) {\n      const sqlRandom = `\n        ${baseSelectSql}\n        ORDER BY RANDOM()\n        LIMIT $1\n      `;\n      ({\n        rows\n      } = await db.query(sqlRandom, [lim]));\n    }\n    res.json({\n      items: rows,\n      total: rows.length\n    });\n  } catch (err) {\n    console.error('public products best-sellers error:', err);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\n\n/* =========================================================\r\n * GET /api/products/:productId  → object เดี่ยว\r\n * ========================================================= */\nrouter.get('/:productId', async (req, res) => {\n  try {\n    const productId = toInt(req.params.productId);\n    if (!Number.isInteger(productId)) return res.status(400).json({\n      error: 'invalid productId'\n    });\n    const {\n      publishedCol,\n      archivedFilter,\n      hasImageUrl\n    } = await getSchemaFlags();\n    const hasSellingPrice = await hasColumn('products', 'selling_price');\n    const hasPriceCol = await hasColumn('products', 'price');\n    const basePriceCol = hasSellingPrice ? 'p.selling_price' : hasPriceCol ? 'p.price' : null;\n    const p = (await db.query(`\n      SELECT\n        p.product_id, p.product_name, p.description,\n        ${hasImageUrl ? 'p.image_url' : 'NULL::text AS image_url'},\n        p.category_id, p.subcategory_id, ${basePriceCol ? basePriceCol : 'NULL'} AS selling_price\n      FROM products p\n      WHERE p.product_id = $1\n        AND (${publishedCol} = TRUE)\n        AND (${archivedFilter})\n      `, [productId])).rows[0];\n    if (!p) return res.status(404).json({\n      error: 'product not found'\n    });\n    if (!p.image_url) {\n      var _cv$rows$;\n      const cv = await db.query(`SELECT MIN(url) AS cover_url FROM product_images WHERE product_id = $1`, [productId]);\n      p.image_url = ((_cv$rows$ = cv.rows[0]) === null || _cv$rows$ === void 0 ? void 0 : _cv$rows$.cover_url) || null;\n    }\n    const useView = await hasTable('v_product_variants_live_stock');\n    let variants = [];\n    if (useView) {\n      const hasFinal = await hasColumn('v_product_variants_live_stock', 'final_price');\n      variants = (await db.query(`\n        SELECT variant_id, product_id, sku,\n               ${hasFinal ? 'COALESCE(price_override, final_price)' : 'price_override'} AS price,\n               COALESCE(stock,0)::int AS stock\n        FROM v_product_variants_live_stock\n        WHERE product_id = $1\n        ORDER BY variant_id ASC\n      `, [productId])).rows;\n    } else {\n      variants = (await db.query(`\n        SELECT variant_id, product_id, sku, NULL::numeric AS price, 0::int AS stock\n        FROM product_variants\n        WHERE product_id = $1\n        ORDER BY variant_id ASC\n      `, [productId])).rows;\n    }\n    res.json({\n      ...p,\n      variants\n    });\n  } catch (err) {\n    console.error('public product detail error:', err);\n    res.status(500).json({\n      error: 'Server error'\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","db","router","Router","get","_req","res","json","ok","toInt","v","def","min","max","n","parseInt","Number","isFinite","Math","hasTable","table","_rows$","rows","query","hasColumn","col","length","getSchemaFlags","hasPublished","hasIsPubProd","publishedCol","hasIsArchived","hasArchivedAt","archivedFilter","catPub","subPub","hasImageUrl","buildSort","sort","alias","useView","soldCol","priceCol","String","toLowerCase","buildSelectGroup","where","hasFinal","hasSellingPrice","hasPriceCol","basePriceCol","priceExpr","stockExpr","select","groupBy","filter","Boolean","joins","whereConds","req","featured","category_id","subcategory_id","q","limit","offset","include_archived","lim","off","includeArchived","params","push","trim","qq","wantPopular","baseSelectSql","join","sql","listParams","soldCTE","items","total","err","console","error","status","top","per_page","pageSize","sqlPopular","sqlRandom","productId","isInteger","p","image_url","_cv$rows$","cv","cover_url","variants","module","exports"],"sources":["D:/project19/frontend/src/admin/ProductManagement.js"],"sourcesContent":["// backend/routes/publicProducts.js\r\n// ดึง “สินค้าทั้งหมด” + best-sellers (มีสุ่ม fallback)\r\n// ✅ ค่าเริ่มต้น: products.limit=60, best-sellers.limit=12\r\n// ✅ คืนรูปแบบ { items, total } (ยกเว้น /:productId ที่คืน object เดียว)\r\n\r\nconst express = require('express');\r\n\r\nlet db;\r\ntry { db = require('../db'); } catch { db = require('../db/db'); }\r\n\r\nconst router = express.Router();\r\nrouter.get('/_ping', (_req, res) => res.json({ ok: true }));\r\n\r\n/* ----------------- helpers ----------------- */\r\nfunction toInt(v, def = 0, min = -2147483648, max = 2147483647) {\r\n  const n = parseInt(v, 10);\r\n  if (!Number.isFinite(n)) return def;\r\n  return Math.min(Math.max(n, min), max);\r\n}\r\nasync function hasTable(table) {\r\n  const { rows } = await db.query(`SELECT to_regclass($1) IS NOT NULL AS ok`, [`public.${table}`]);\r\n  return !!rows[0]?.ok;\r\n}\r\nasync function hasColumn(table, col) {\r\n  const { rows } = await db.query(`\r\n    SELECT 1 FROM information_schema.columns\r\n    WHERE table_schema='public' AND table_name=$1 AND column_name=$2\r\n    LIMIT 1\r\n  `, [table, col]);\r\n  return rows.length > 0;\r\n}\r\n\r\nasync function getSchemaFlags() {\r\n  const hasPublished  = await hasColumn('products', 'published');\r\n  const hasIsPubProd  = await hasColumn('products', 'is_published');\r\n  const publishedCol  = hasPublished ? 'COALESCE(p.published, TRUE)'\r\n                     : hasIsPubProd ? 'COALESCE(p.is_published, TRUE)'\r\n                     : 'TRUE';\r\n\r\n  const hasIsArchived = await hasColumn('products', 'is_archived');\r\n  const hasArchivedAt = await hasColumn('products', 'archived_at');\r\n  const archivedFilter = hasIsArchived\r\n    ? 'COALESCE(p.is_archived,FALSE) = FALSE'\r\n    : hasArchivedAt\r\n      ? 'p.archived_at IS NULL'\r\n      : 'TRUE';\r\n\r\n  const catPub  = (await hasColumn('product_categories','is_published')) ? 'COALESCE(c.is_published,TRUE) = TRUE' : 'TRUE';\r\n  const subPub  = (await hasColumn('subcategories','is_published'))     ? 'COALESCE(sc.is_published,TRUE) = TRUE' : 'TRUE';\r\n  const hasImageUrl = await hasColumn('products','image_url');\r\n\r\n  return { publishedCol, archivedFilter, catPub, subPub, hasImageUrl };\r\n}\r\n\r\nfunction buildSort(sort, { alias = 'p', useView = false, soldCol = 'sold_qty' } = {}) {\r\n  const priceCol = useView ? 'min_price' : `${alias}.selling_price`;\r\n  switch (String(sort || '').toLowerCase()) {\r\n    case 'popular':    return `${soldCol} DESC NULLS LAST, ${alias}.product_id DESC`;\r\n    case 'newest':     return `${alias}.product_id DESC`;\r\n    case 'price_asc':  return `${priceCol} ASC NULLS LAST, ${alias}.product_id DESC`;\r\n    case 'price_desc': return `${priceCol} DESC NULLS LAST, ${alias}.product_id DESC`;\r\n    case 'name_asc':   return `${alias}.product_name ASC, ${alias}.product_id DESC`;\r\n    case 'name_desc':  return `${alias}.product_name DESC, ${alias}.product_id DESC`;\r\n    default:           return `${alias}.product_id DESC`;\r\n  }\r\n}\r\n\r\nasync function buildSelectGroup({ where }) {\r\n  const useView  = await hasTable('v_product_variants_live_stock');\r\n  const hasFinal = useView && await hasColumn('v_product_variants_live_stock', 'final_price');\r\n  const { publishedCol, archivedFilter, catPub, subPub, hasImageUrl } = await getSchemaFlags();\r\n\r\n  const hasSellingPrice = await hasColumn('products', 'selling_price');\r\n  const hasPriceCol     = await hasColumn('products', 'price');\r\n  const basePriceCol    = hasSellingPrice ? 'p.selling_price' : (hasPriceCol ? 'p.price' : null);\r\n\r\n  const priceExpr = useView\r\n    ? (hasFinal ? 'MIN(COALESCE(v.price_override, v.final_price))' : 'MIN(v.price_override)')\r\n    : (basePriceCol ? basePriceCol : 'NULL');\r\n\r\n  const stockExpr = useView ? 'COALESCE(SUM(v.stock),0)::int' : '0::int';\r\n\r\n  const select = [\r\n    'p.product_id',\r\n    'p.product_name',\r\n    'p.description',\r\n    `${hasImageUrl ? `COALESCE(NULLIF(p.image_url, ''), cv.cover_url)` : 'cv.cover_url'} AS image_url`,\r\n    'p.category_id',\r\n    'c.category_name',\r\n    'p.subcategory_id',\r\n    'sc.subcategory_name',\r\n    `${priceExpr}::numeric AS min_price`,\r\n    `${stockExpr} AS stock`,\r\n    useView ? 'NULL::numeric AS selling_price'\r\n            : (basePriceCol ? `${basePriceCol}::numeric AS selling_price` : 'NULL::numeric AS selling_price'),\r\n  ];\r\n\r\n  const groupBy = [\r\n    'p.product_id',\r\n    'p.product_name',\r\n    'p.description',\r\n    hasImageUrl ? 'p.image_url' : null,\r\n    'cv.cover_url',\r\n    'p.category_id',\r\n    'c.category_name',\r\n    'p.subcategory_id',\r\n    'sc.subcategory_name',\r\n    (!useView && basePriceCol) ? basePriceCol : null,\r\n  ].filter(Boolean);\r\n\r\n  const joins = [\r\n    useView ? 'LEFT JOIN v_product_variants_live_stock v ON v.product_id = p.product_id' : null,\r\n    `LEFT JOIN LATERAL (\r\n      SELECT MIN(pi.url) AS cover_url\r\n      FROM product_images pi\r\n      WHERE pi.product_id = p.product_id\r\n    ) cv ON TRUE`,\r\n    'LEFT JOIN product_categories c ON c.category_id = p.category_id',\r\n    'LEFT JOIN subcategories sc     ON sc.subcategory_id = p.subcategory_id',\r\n  ].filter(Boolean);\r\n\r\n  const whereConds = [\r\n    ...where,\r\n    `(${publishedCol} = TRUE)`,\r\n    `(${archivedFilter})`,\r\n    `(${catPub})`,\r\n    `(${subPub})`,\r\n  ];\r\n\r\n  return { useView, select, groupBy, joins, whereConds };\r\n}\r\n\r\n/* =========================================================\r\n * GET /api/products  → { items, total }\r\n * query: featured, category_id, subcategory_id, q, sort, limit, offset, include_archived\r\n * ========================================================= */\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const {\r\n      featured,\r\n      category_id,\r\n      subcategory_id,\r\n      q,\r\n      sort = 'newest',\r\n      limit = 60,         // ⭐ default 60\r\n      offset = 0,\r\n      include_archived,\r\n    } = req.query || {};\r\n\r\n    const lim = toInt(limit, 60, 1, 500);\r\n    const off = toInt(offset, 0, 0, 100000);\r\n\r\n    const includeArchived =\r\n      String(include_archived).toLowerCase() === '1' ||\r\n      String(include_archived).toLowerCase() === 'true';\r\n\r\n    const where = [];\r\n    const params = [];\r\n\r\n    if (!includeArchived) {\r\n      const { archivedFilter } = await getSchemaFlags();\r\n      where.push(archivedFilter);\r\n    }\r\n\r\n    if (category_id) {\r\n      params.push(String(category_id));\r\n      where.push(`p.category_id = $${params.length}`);\r\n    }\r\n    if (subcategory_id) {\r\n      params.push(String(subcategory_id));\r\n      where.push(`p.subcategory_id = $${params.length}`);\r\n    }\r\n    if (q && String(q).trim() !== '') {\r\n      const qq = `%${String(q).trim()}%`;\r\n      params.push(qq, qq);\r\n      where.push(`(p.product_name ILIKE $${params.length - 1} OR p.description ILIKE $${params.length})`);\r\n    }\r\n\r\n    const wantPopular  = String(sort || '').toLowerCase() === 'popular' ||\r\n                         String(featured).toLowerCase() === '1' ||\r\n                         String(featured).toLowerCase() === 'true';\r\n\r\n    const { useView, select, groupBy, joins, whereConds } = await buildSelectGroup({ where });\r\n\r\n    const baseSelectSql = `\r\n      SELECT\r\n        ${select.join(',\\n        ')}\r\n      FROM products p\r\n      ${joins.join('\\n      ')}\r\n      ${whereConds.length ? 'WHERE ' + whereConds.join(' AND ') : ''}\r\n      ${groupBy.length ? 'GROUP BY ' + groupBy.join(', ') : ''}\r\n    `;\r\n\r\n    let sql, listParams;\r\n    if (wantPopular) {\r\n      const soldCTE = `\r\n        WITH sold AS (\r\n          SELECT od.product_id, COALESCE(SUM(od.quantity), 0)::int AS sold_qty\r\n          FROM order_details od\r\n          LEFT JOIN orders o ON o.order_id = od.order_id\r\n          WHERE o.order_status_id IN ('o1','o2') -- ✅ ไม่มีช่องว่าง\r\n          GROUP BY od.product_id\r\n        )\r\n      `;\r\n      sql = `\r\n        ${soldCTE}\r\n        SELECT x.*, COALESCE(s.sold_qty, 0) AS sold_qty\r\n        FROM (\r\n          ${baseSelectSql}\r\n        ) x\r\n        LEFT JOIN sold s ON s.product_id = x.product_id\r\n        ORDER BY ${buildSort('popular', { alias: 'x', useView, soldCol: 'COALESCE(s.sold_qty, 0)' })}\r\n        LIMIT $${params.length + 1} OFFSET $${params.length + 2}\r\n      `;\r\n      listParams = [...params, lim, off];\r\n    } else {\r\n      sql = `\r\n        ${baseSelectSql}\r\n        ORDER BY ${buildSort(sort, { alias: 'p', useView })}\r\n        LIMIT $${params.push(lim)} OFFSET $${params.push(off)}\r\n      `;\r\n      listParams = params;\r\n    }\r\n\r\n    const { rows } = await db.query(sql, listParams);\r\n    res.json({ items: rows, total: rows.length });\r\n  } catch (err) {\r\n    console.error('public products list error:', err);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * GET /api/products/best-sellers  → { items, total }  (มีสุ่ม fallback)\r\n * ========================================================= */\r\nrouter.get('/best-sellers', async (req, res) => {\r\n  try {\r\n    const lim = toInt(req.query.limit || req.query.top || req.query.per_page || req.query.pageSize, 12, 1, 50); // ⭐ default 12\r\n\r\n    const { useView, select, groupBy, joins, whereConds } = await buildSelectGroup({ where: [] });\r\n\r\n    const baseSelectSql = `\r\n      SELECT\r\n        ${select.join(',\\n        ')}\r\n      FROM products p\r\n      ${joins.join('\\n      ')}\r\n      ${whereConds.length ? 'WHERE ' + whereConds.join(' AND ') : ''}\r\n      ${groupBy.length ? 'GROUP BY ' + groupBy.join(', ') : ''}\r\n    `;\r\n\r\n    const sqlPopular = `\r\n      WITH sold AS (\r\n        SELECT od.product_id, COALESCE(SUM(od.quantity), 0)::int AS sold_qty\r\n        FROM order_details od\r\n        LEFT JOIN orders o ON o.order_id = od.order_id\r\n        WHERE o.order_status_id IN ('o1','o2')\r\n        GROUP BY od.product_id\r\n      )\r\n      SELECT x.*, COALESCE(s.sold_qty, 0) AS sold_qty\r\n      FROM (\r\n        ${baseSelectSql}\r\n      ) x\r\n      LEFT JOIN sold s ON s.product_id = x.product_id\r\n      ORDER BY ${buildSort('popular', { alias: 'x', useView, soldCol: 'COALESCE(s.sold_qty, 0)' })}\r\n      LIMIT $1\r\n    `;\r\n\r\n    let { rows } = await db.query(sqlPopular, [lim]);\r\n\r\n    if (!rows.length) {\r\n      const sqlRandom = `\r\n        ${baseSelectSql}\r\n        ORDER BY RANDOM()\r\n        LIMIT $1\r\n      `;\r\n      ({ rows } = await db.query(sqlRandom, [lim]));\r\n    }\r\n\r\n    res.json({ items: rows, total: rows.length });\r\n  } catch (err) {\r\n    console.error('public products best-sellers error:', err);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * GET /api/products/:productId  → object เดี่ยว\r\n * ========================================================= */\r\nrouter.get('/:productId', async (req, res) => {\r\n  try {\r\n    const productId = toInt(req.params.productId);\r\n    if (!Number.isInteger(productId)) return res.status(400).json({ error: 'invalid productId' });\r\n\r\n    const { publishedCol, archivedFilter, hasImageUrl } = await getSchemaFlags();\r\n\r\n    const hasSellingPrice = await hasColumn('products', 'selling_price');\r\n    const hasPriceCol     = await hasColumn('products', 'price');\r\n    const basePriceCol    = hasSellingPrice ? 'p.selling_price' : (hasPriceCol ? 'p.price' : null);\r\n\r\n    const p = (await db.query(\r\n      `\r\n      SELECT\r\n        p.product_id, p.product_name, p.description,\r\n        ${hasImageUrl ? 'p.image_url' : 'NULL::text AS image_url'},\r\n        p.category_id, p.subcategory_id, ${basePriceCol ? basePriceCol : 'NULL'} AS selling_price\r\n      FROM products p\r\n      WHERE p.product_id = $1\r\n        AND (${publishedCol} = TRUE)\r\n        AND (${archivedFilter})\r\n      `,\r\n      [productId]\r\n    )).rows[0];\r\n    if (!p) return res.status(404).json({ error: 'product not found' });\r\n\r\n    if (!p.image_url) {\r\n      const cv = await db.query(`SELECT MIN(url) AS cover_url FROM product_images WHERE product_id = $1`, [productId]);\r\n      p.image_url = cv.rows[0]?.cover_url || null;\r\n    }\r\n\r\n    const useView = await hasTable('v_product_variants_live_stock');\r\n    let variants = [];\r\n    if (useView) {\r\n      const hasFinal = await hasColumn('v_product_variants_live_stock', 'final_price');\r\n      variants = (await db.query(`\r\n        SELECT variant_id, product_id, sku,\r\n               ${hasFinal ? 'COALESCE(price_override, final_price)' : 'price_override'} AS price,\r\n               COALESCE(stock,0)::int AS stock\r\n        FROM v_product_variants_live_stock\r\n        WHERE product_id = $1\r\n        ORDER BY variant_id ASC\r\n      `, [productId])).rows;\r\n    } else {\r\n      variants = (await db.query(`\r\n        SELECT variant_id, product_id, sku, NULL::numeric AS price, 0::int AS stock\r\n        FROM product_variants\r\n        WHERE product_id = $1\r\n        ORDER BY variant_id ASC\r\n      `, [productId])).rows;\r\n    }\r\n\r\n    res.json({ ...p, variants });\r\n  } catch (err) {\r\n    console.error('public product detail error:', err);\r\n    res.status(500).json({ error: 'Server error' });\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}