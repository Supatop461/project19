{"ast":null,"code":"// backend/routes/addresses.js\n// ✅ CRUD ที่อยู่ผู้ใช้ + default (atomic transaction) + backfill จาก users.address\n// ✅ รองรับทั้ง req.user.sub และ req.user.user_id (กันเคส middleware ต่างกัน)\n// ✅ รองรับทั้ง db.getClient() และ db.pool.connect() (ถ้าไม่มี getClient)\n\nconst express = require('express');\nconst db = require('../db');\nconst {\n  requireAuth\n} = require('../middleware/auth');\nconst router = express.Router();\nconsole.log('▶ addresses router LOADED');\n\n/* ---------- [HELPER] auth & db client ---------- */\nfunction getUid(req) {\n  var _ref, _ref2, _u$sub;\n  const u = req.user || {};\n  // ⛏️ FIX: ลบตัวอักษรเกิน \";a\" ออก\n  return (_ref = (_ref2 = (_u$sub = u.sub) !== null && _u$sub !== void 0 ? _u$sub : u.user_id) !== null && _ref2 !== void 0 ? _ref2 : u.id) !== null && _ref !== void 0 ? _ref : null;\n}\nasync function getClientSafe() {\n  if (typeof db.getClient === 'function') return await db.getClient();\n  if (db.pool && typeof db.pool.connect === 'function') return await db.pool.connect();\n  // fallback แบบ no-transaction (ใช้ตัว db ตรง ๆ)\n  return {\n    query: db.query.bind(db),\n    release() {},\n    __noTxn: true\n  };\n}\n\n/* =========================================================\r\n  // [HELPER] sanitize & coercion\r\n * =======================================================*/\nconst san = v => {\n  if (v === undefined || v === null) return null;\n  const s = String(v).trim();\n  return s === '' ? null : s;\n};\nconst boolOrNull = v => v === true ? true : v === false ? false : null;\nconst normCountry = v => (san(v) || 'TH').toUpperCase().slice(0, 2);\n\n/* =========================================================\r\n * [HELPER] Query ร่วมใช้\r\n * =======================================================*/\nasync function listAddressesByUser(userId) {\n  const {\n    rows\n  } = await db.query(`SELECT address_id, user_id, label, recipient_name, phone,\n            line1, line2, subdistrict, district, province,\n            postal_code, country, is_default, created_at\n       FROM user_addresses\n      WHERE user_id = $1\n      ORDER BY is_default DESC, address_id DESC`, [userId]);\n  return rows;\n}\n\n/* =========================================================\r\n * [BACKFILL] users.address → user_addresses เมื่อยังไม่มีรายการ\r\n * =======================================================*/\nasync function backfillFromUsersIfEmpty(userId) {\n  const client = await getClientSafe();\n  const useTxn = !client.__noTxn;\n  try {\n    if (useTxn) await client.query('BEGIN');\n    const {\n      rows: cnt\n    } = await client.query(`SELECT COUNT(*)::int AS c FROM user_addresses WHERE user_id = $1`, [userId]);\n    if (cnt[0].c > 0) {\n      if (useTxn) await client.query('COMMIT');\n      return;\n    }\n    const {\n      rows: u\n    } = await client.query(`SELECT phone_number, email, address\n         FROM users\n        WHERE user_id = $1\n        LIMIT 1`, [userId]);\n    const row = u[0];\n    const rawAddr = san(row === null || row === void 0 ? void 0 : row.address);\n    if (!row || !rawAddr) {\n      if (useTxn) await client.query('COMMIT');\n      return;\n    }\n    const zipMatch = rawAddr.match(/(\\d{5})\\s*$/);\n    const zipcode = zipMatch ? zipMatch[1] : null;\n    await client.query(`INSERT INTO user_addresses\n        (user_id, label, recipient_name, phone,\n         line1, line2, subdistrict, district, province,\n         postal_code, country, is_default)\n       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11, TRUE)`, [userId, 'ที่อยู่จากโปรไฟล์', null, san(row.phone_number), rawAddr, null, null, null, null, zipcode, 'TH']);\n    if (useTxn) await client.query('COMMIT');\n  } catch (e) {\n    if (useTxn) await client.query('ROLLBACK');\n    console.error('addresses backfill error:', e);\n  } finally {\n    client.release && client.release();\n  }\n}\n\n/* =========================================================\r\n * [DEBUG]\r\n * =======================================================*/\nrouter.get('/_debug', (req, res) => {\n  res.json({\n    ok: true,\n    at: '/api/addresses',\n    user: req.user || null\n  });\n});\n\n/* =========================================================\r\n * [LIST] GET /api/addresses\r\n * =======================================================*/\nrouter.get('/', requireAuth, async (req, res) => {\n  try {\n    const uid = getUid(req);\n    if (!uid) return res.status(401).json({\n      error: 'Unauthorized'\n    });\n    const rows = await listAddressesByUser(uid);\n    res.json(rows);\n  } catch (e) {\n    console.error('addresses list error:', e);\n    res.status(500).json({\n      error: 'Database error'\n    });\n  }\n});\n\n/* =========================================================\r\n * [LIST+BACKFILL] GET /api/addresses/me\r\n * =======================================================*/\nrouter.get('/me', requireAuth, async (req, res) => {\n  try {\n    const uid = getUid(req);\n    if (!uid) return res.status(401).json({\n      error: 'Unauthorized'\n    });\n    await backfillFromUsersIfEmpty(uid);\n    const rows = await listAddressesByUser(uid);\n    res.json(rows);\n  } catch (e) {\n    console.error('addresses me error:', e);\n    res.status(500).json({\n      error: 'Database error'\n    });\n  }\n});\n\n/* =========================================================\r\n * [GET DEFAULT] GET /api/addresses/default\r\n * =======================================================*/\nrouter.get('/default', requireAuth, async (req, res) => {\n  try {\n    const uid = getUid(req);\n    if (!uid) return res.status(401).json({\n      error: 'Unauthorized'\n    });\n    const {\n      rows\n    } = await db.query(`SELECT address_id, user_id, label, recipient_name, phone,\n              line1, line2, subdistrict, district, province,\n              postal_code, country, is_default, created_at\n         FROM user_addresses\n        WHERE user_id = $1 AND is_default = TRUE\n        LIMIT 1`, [uid]);\n    res.json(rows[0] || null);\n  } catch (e) {\n    console.error('addresses default error:', e);\n    res.status(500).json({\n      error: 'Database error'\n    });\n  }\n});\n\n/* =========================================================\r\n * [CREATE] POST /api/addresses\r\n * =======================================================*/\nrouter.post('/', requireAuth, async (req, res) => {\n  var _req$body, _req$body2, _req$body3, _req$body4, _req$body5, _req$body6, _req$body7, _req$body8, _req$body9, _req$body0, _req$body1;\n  const uid = getUid(req);\n  if (!uid) return res.status(401).json({\n    error: 'Unauthorized'\n  });\n  const payload = {\n    label: san((_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.label),\n    recipient_name: san((_req$body2 = req.body) === null || _req$body2 === void 0 ? void 0 : _req$body2.recipient_name),\n    phone: san((_req$body3 = req.body) === null || _req$body3 === void 0 ? void 0 : _req$body3.phone),\n    line1: san((_req$body4 = req.body) === null || _req$body4 === void 0 ? void 0 : _req$body4.line1),\n    line2: san((_req$body5 = req.body) === null || _req$body5 === void 0 ? void 0 : _req$body5.line2),\n    subdistrict: san((_req$body6 = req.body) === null || _req$body6 === void 0 ? void 0 : _req$body6.subdistrict),\n    district: san((_req$body7 = req.body) === null || _req$body7 === void 0 ? void 0 : _req$body7.district),\n    province: san((_req$body8 = req.body) === null || _req$body8 === void 0 ? void 0 : _req$body8.province),\n    postal_code: san((_req$body9 = req.body) === null || _req$body9 === void 0 ? void 0 : _req$body9.postal_code),\n    country: normCountry((_req$body0 = req.body) === null || _req$body0 === void 0 ? void 0 : _req$body0.country),\n    is_default: ((_req$body1 = req.body) === null || _req$body1 === void 0 ? void 0 : _req$body1.is_default) === true\n  };\n  if (!payload.line1) return res.status(400).json({\n    error: 'line1 required'\n  });\n  const client = await getClientSafe();\n  const useTxn = !client.__noTxn;\n  try {\n    if (useTxn) await client.query('BEGIN');\n    const {\n      rows: cnt\n    } = await client.query(`SELECT COUNT(*)::int AS c FROM user_addresses WHERE user_id = $1`, [uid]);\n    const isFirst = cnt[0].c === 0;\n    const makeDefault = payload.is_default || isFirst;\n    if (makeDefault) {\n      await client.query(`UPDATE user_addresses SET is_default = FALSE\n          WHERE user_id = $1 AND is_default = TRUE`, [uid]);\n    }\n    const {\n      rows\n    } = await client.query(`INSERT INTO user_addresses\n        (user_id, label, recipient_name, phone, line1, line2,\n         subdistrict, district, province, postal_code, country, is_default)\n       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)\n       RETURNING *`, [uid, payload.label, payload.recipient_name, payload.phone, payload.line1, payload.line2, payload.subdistrict, payload.district, payload.province, payload.postal_code, payload.country, makeDefault]);\n    if (useTxn) await client.query('COMMIT');\n    res.status(201).json(rows[0]);\n  } catch (e) {\n    if (useTxn) await client.query('ROLLBACK');\n    console.error('addresses create error:', e);\n    if (e.code === '23505') return res.status(409).json({\n      error: 'Default address already exists'\n    });\n    res.status(500).json({\n      error: 'Database error'\n    });\n  } finally {\n    client.release && client.release();\n  }\n});\n\n/* =========================================================\r\n * [UPDATE] PUT /api/addresses/:id\r\n * =======================================================*/\nrouter.put('/:id', requireAuth, async (req, res) => {\n  var _req$body10, _req$body11, _req$body12, _req$body13, _req$body14, _req$body15, _req$body16, _req$body17, _req$body18, _req$body19, _req$body20, _req$body21;\n  const id = Number(req.params.id);\n  if (!Number.isFinite(id)) return res.status(400).json({\n    error: 'Invalid id'\n  });\n  const uid = getUid(req);\n  if (!uid) return res.status(401).json({\n    error: 'Unauthorized'\n  });\n  console.log('[PUT /addresses/:id]', {\n    uid,\n    id,\n    body: req.body\n  });\n  const P = {\n    label: san((_req$body10 = req.body) === null || _req$body10 === void 0 ? void 0 : _req$body10.label),\n    recipient_name: san((_req$body11 = req.body) === null || _req$body11 === void 0 ? void 0 : _req$body11.recipient_name),\n    phone: san((_req$body12 = req.body) === null || _req$body12 === void 0 ? void 0 : _req$body12.phone),\n    line1: san((_req$body13 = req.body) === null || _req$body13 === void 0 ? void 0 : _req$body13.line1),\n    line2: san((_req$body14 = req.body) === null || _req$body14 === void 0 ? void 0 : _req$body14.line2),\n    subdistrict: san((_req$body15 = req.body) === null || _req$body15 === void 0 ? void 0 : _req$body15.subdistrict),\n    district: san((_req$body16 = req.body) === null || _req$body16 === void 0 ? void 0 : _req$body16.district),\n    province: san((_req$body17 = req.body) === null || _req$body17 === void 0 ? void 0 : _req$body17.province),\n    postal_code: san((_req$body18 = req.body) === null || _req$body18 === void 0 ? void 0 : _req$body18.postal_code),\n    country: ((_req$body19 = req.body) === null || _req$body19 === void 0 ? void 0 : _req$body19.country) === undefined ? null : normCountry((_req$body20 = req.body) === null || _req$body20 === void 0 ? void 0 : _req$body20.country),\n    is_default: boolOrNull((_req$body21 = req.body) === null || _req$body21 === void 0 ? void 0 : _req$body21.is_default)\n  };\n  const client = await getClientSafe();\n  const useTxn = !client.__noTxn;\n  try {\n    if (useTxn) await client.query('BEGIN');\n    const {\n      rows: owned\n    } = await client.query(`SELECT is_default FROM user_addresses\n        WHERE address_id = $1 AND user_id = $2`, [id, uid]);\n    if (!owned[0]) {\n      if (useTxn) await client.query('ROLLBACK');\n      return res.status(404).json({\n        error: 'Not found'\n      });\n    }\n    if (P.is_default === true) {\n      await client.query(`UPDATE user_addresses SET is_default = FALSE\n          WHERE user_id = $1 AND is_default = TRUE`, [uid]);\n    }\n    const {\n      rows\n    } = await client.query(`UPDATE user_addresses\n         SET label          = COALESCE($1, label),\n             recipient_name = COALESCE($2, recipient_name),\n             phone          = COALESCE($3, phone),\n             line1          = COALESCE($4, line1),\n             line2          = COALESCE($5, line2),\n             subdistrict    = COALESCE($6, subdistrict),\n             district       = COALESCE($7, district),\n             province       = COALESCE($8, province),\n             postal_code    = COALESCE($9, postal_code),\n             country        = COALESCE($10, country),\n             is_default     = COALESCE($11, is_default)\n       WHERE address_id = $12 AND user_id = $13\n       RETURNING *`, [P.label, P.recipient_name, P.phone, P.line1, P.line2, P.subdistrict, P.district, P.province, P.postal_code, P.country, P.is_default, id, uid]);\n    if (useTxn) await client.query('COMMIT');\n    res.json(rows[0]);\n  } catch (e) {\n    if (useTxn) await client.query('ROLLBACK');\n    console.error('addresses update error:', e);\n    if (e.code === '23505') return res.status(409).json({\n      error: 'Default address already exists'\n    });\n    res.status(500).json({\n      error: 'Database error'\n    });\n  } finally {\n    client.release && client.release();\n  }\n});\n\n/* =========================================================\r\n * [SET DEFAULT] PATCH /api/addresses/:id/default\r\n * =======================================================*/\nrouter.patch('/:id/default', requireAuth, async (req, res) => {\n  const id = Number(req.params.id);\n  if (!Number.isFinite(id)) return res.status(400).json({\n    error: 'Invalid id'\n  });\n  const uid = getUid(req);\n  if (!uid) return res.status(401).json({\n    error: 'Unauthorized'\n  });\n  console.log('[PATCH /addresses/:id/default]', {\n    uid,\n    id\n  });\n  const client = await getClientSafe();\n  const useTxn = !client.__noTxn;\n  try {\n    if (useTxn) await client.query('BEGIN');\n    const {\n      rows: owned\n    } = await client.query(`SELECT 1 FROM user_addresses WHERE address_id = $1 AND user_id = $2`, [id, uid]);\n    if (!owned.length) {\n      if (useTxn) await client.query('ROLLBACK');\n      return res.status(404).json({\n        error: 'Not found'\n      });\n    }\n    await client.query(`UPDATE user_addresses SET is_default = FALSE\n        WHERE user_id = $1 AND is_default = TRUE`, [uid]);\n    const {\n      rows\n    } = await client.query(`UPDATE user_addresses\n          SET is_default = TRUE\n        WHERE address_id = $1 AND user_id = $2\n        RETURNING *`, [id, uid]);\n    if (useTxn) await client.query('COMMIT');\n    res.json(rows[0]);\n  } catch (e) {\n    if (useTxn) await client.query('ROLLBACK');\n    console.error('addresses set default error:', e);\n    res.status(500).json({\n      error: 'Database error'\n    });\n  } finally {\n    client.release && client.release();\n  }\n});\n\n/* =========================================================\r\n * [DELETE] DELETE /api/addresses/:id\r\n * =======================================================*/\nrouter.delete('/:id', requireAuth, async (req, res) => {\n  const id = Number(req.params.id);\n  if (!Number.isFinite(id)) return res.status(400).json({\n    error: 'Invalid id'\n  });\n  const uid = getUid(req);\n  if (!uid) return res.status(401).json({\n    error: 'Unauthorized'\n  });\n  console.log('[DELETE /addresses/:id]', {\n    uid,\n    id\n  });\n  const client = await getClientSafe();\n  const useTxn = !client.__noTxn;\n  try {\n    if (useTxn) await client.query('BEGIN');\n    const {\n      rows: before\n    } = await client.query(`SELECT is_default FROM user_addresses\n        WHERE address_id = $1 AND user_id = $2`, [id, uid]);\n    if (!before[0]) {\n      if (useTxn) await client.query('ROLLBACK');\n      return res.status(404).json({\n        error: 'Not found'\n      });\n    }\n    const wasDefault = !!before[0].is_default;\n    await client.query(`DELETE FROM user_addresses WHERE address_id = $1 AND user_id = $2`, [id, uid]);\n    if (wasDefault) {\n      const {\n        rows: remain\n      } = await client.query(`SELECT address_id\n           FROM user_addresses\n          WHERE user_id = $1\n          ORDER BY address_id DESC\n          LIMIT 1`, [uid]);\n      if (remain[0]) {\n        await client.query(`UPDATE user_addresses\n              SET is_default = TRUE\n            WHERE address_id = $1 AND user_id = $2`, [remain[0].address_id, uid]);\n      }\n    }\n    if (useTxn) await client.query('COMMIT');\n    res.status(204).send();\n  } catch (e) {\n    if (useTxn) await client.query('ROLLBACK');\n    console.error('addresses delete error:', e);\n    res.status(500).json({\n      error: 'Database error'\n    });\n  } finally {\n    client.release && client.release();\n  }\n});\nmodule.exports = router;\n\n// ✅ CRUD ที่อยู่ผู้ใช้ + default (atomic transaction) + backfill จาก users.address\n// ✅ รองรับทั้ง req.user.sub และ req.user.user_id (กันเคส middleware ต่างกัน)\n// ✅ รองรับทั้ง db.getClient() และ db.pool.connect() (ถ้าไม่มี getClient)","map":{"version":3,"names":["express","require","db","requireAuth","router","Router","console","log","getUid","req","_ref","_ref2","_u$sub","u","user","sub","user_id","id","getClientSafe","getClient","pool","connect","query","bind","release","__noTxn","san","v","undefined","s","String","trim","boolOrNull","normCountry","toUpperCase","slice","listAddressesByUser","userId","rows","backfillFromUsersIfEmpty","client","useTxn","cnt","c","row","rawAddr","address","zipMatch","match","zipcode","phone_number","e","error","get","res","json","ok","at","uid","status","post","_req$body","_req$body2","_req$body3","_req$body4","_req$body5","_req$body6","_req$body7","_req$body8","_req$body9","_req$body0","_req$body1","payload","label","body","recipient_name","phone","line1","line2","subdistrict","district","province","postal_code","country","is_default","isFirst","makeDefault","code","put","_req$body10","_req$body11","_req$body12","_req$body13","_req$body14","_req$body15","_req$body16","_req$body17","_req$body18","_req$body19","_req$body20","_req$body21","Number","params","isFinite","P","owned","patch","length","delete","before","wasDefault","remain","address_id","send","module","exports"],"sources":["D:/project19/frontend/src/account/Addresses.js"],"sourcesContent":["// backend/routes/addresses.js\r\n// ✅ CRUD ที่อยู่ผู้ใช้ + default (atomic transaction) + backfill จาก users.address\r\n// ✅ รองรับทั้ง req.user.sub และ req.user.user_id (กันเคส middleware ต่างกัน)\r\n// ✅ รองรับทั้ง db.getClient() และ db.pool.connect() (ถ้าไม่มี getClient)\r\n\r\nconst express = require('express');\r\nconst db = require('../db');\r\nconst { requireAuth } = require('../middleware/auth');\r\n\r\nconst router = express.Router();\r\nconsole.log('▶ addresses router LOADED');\r\n\r\n/* ---------- [HELPER] auth & db client ---------- */\r\nfunction getUid(req) {\r\n  const u = req.user || {};\r\n  // ⛏️ FIX: ลบตัวอักษรเกิน \";a\" ออก\r\n  return u.sub ?? u.user_id ?? u.id ?? null;\r\n}\r\n\r\nasync function getClientSafe() {\r\n  if (typeof db.getClient === 'function') return await db.getClient();\r\n  if (db.pool && typeof db.pool.connect === 'function') return await db.pool.connect();\r\n  // fallback แบบ no-transaction (ใช้ตัว db ตรง ๆ)\r\n  return {\r\n    query: db.query.bind(db),\r\n    release() {},\r\n    __noTxn: true,\r\n  };\r\n}\r\n\r\n/* =========================================================\r\n  // [HELPER] sanitize & coercion\r\n * =======================================================*/\r\nconst san = (v) => {\r\n  if (v === undefined || v === null) return null;\r\n  const s = String(v).trim();\r\n  return s === '' ? null : s;\r\n};\r\nconst boolOrNull = (v) => (v === true ? true : v === false ? false : null);\r\nconst normCountry = (v) => (san(v) || 'TH').toUpperCase().slice(0, 2);\r\n\r\n/* =========================================================\r\n * [HELPER] Query ร่วมใช้\r\n * =======================================================*/\r\nasync function listAddressesByUser(userId) {\r\n  const { rows } = await db.query(\r\n    `SELECT address_id, user_id, label, recipient_name, phone,\r\n            line1, line2, subdistrict, district, province,\r\n            postal_code, country, is_default, created_at\r\n       FROM user_addresses\r\n      WHERE user_id = $1\r\n      ORDER BY is_default DESC, address_id DESC`,\r\n    [userId]\r\n  );\r\n  return rows;\r\n}\r\n\r\n/* =========================================================\r\n * [BACKFILL] users.address → user_addresses เมื่อยังไม่มีรายการ\r\n * =======================================================*/\r\nasync function backfillFromUsersIfEmpty(userId) {\r\n  const client = await getClientSafe();\r\n  const useTxn = !client.__noTxn;\r\n  try {\r\n    if (useTxn) await client.query('BEGIN');\r\n\r\n    const { rows: cnt } = await client.query(\r\n      `SELECT COUNT(*)::int AS c FROM user_addresses WHERE user_id = $1`,\r\n      [userId]\r\n    );\r\n    if (cnt[0].c > 0) {\r\n      if (useTxn) await client.query('COMMIT');\r\n      return;\r\n    }\r\n\r\n    const { rows: u } = await client.query(\r\n      `SELECT phone_number, email, address\r\n         FROM users\r\n        WHERE user_id = $1\r\n        LIMIT 1`,\r\n      [userId]\r\n    );\r\n    const row = u[0];\r\n    const rawAddr = san(row?.address);\r\n    if (!row || !rawAddr) {\r\n      if (useTxn) await client.query('COMMIT');\r\n      return;\r\n    }\r\n\r\n    const zipMatch = rawAddr.match(/(\\d{5})\\s*$/);\r\n    const zipcode = zipMatch ? zipMatch[1] : null;\r\n\r\n    await client.query(\r\n      `INSERT INTO user_addresses\r\n        (user_id, label, recipient_name, phone,\r\n         line1, line2, subdistrict, district, province,\r\n         postal_code, country, is_default)\r\n       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11, TRUE)`,\r\n      [\r\n        userId,\r\n        'ที่อยู่จากโปรไฟล์',\r\n        null,\r\n        san(row.phone_number),\r\n        rawAddr,\r\n        null, null, null, null,\r\n        zipcode,\r\n        'TH',\r\n      ]\r\n    );\r\n\r\n    if (useTxn) await client.query('COMMIT');\r\n  } catch (e) {\r\n    if (useTxn) await client.query('ROLLBACK');\r\n    console.error('addresses backfill error:', e);\r\n  } finally {\r\n    client.release && client.release();\r\n  }\r\n}\r\n\r\n/* =========================================================\r\n * [DEBUG]\r\n * =======================================================*/\r\nrouter.get('/_debug', (req, res) => {\r\n  res.json({ ok: true, at: '/api/addresses', user: req.user || null });\r\n});\r\n\r\n/* =========================================================\r\n * [LIST] GET /api/addresses\r\n * =======================================================*/\r\nrouter.get('/', requireAuth, async (req, res) => {\r\n  try {\r\n    const uid = getUid(req);\r\n    if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n    const rows = await listAddressesByUser(uid);\r\n    res.json(rows);\r\n  } catch (e) {\r\n    console.error('addresses list error:', e);\r\n    res.status(500).json({ error: 'Database error' });\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * [LIST+BACKFILL] GET /api/addresses/me\r\n * =======================================================*/\r\nrouter.get('/me', requireAuth, async (req, res) => {\r\n  try {\r\n    const uid = getUid(req);\r\n    if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n    await backfillFromUsersIfEmpty(uid);\r\n    const rows = await listAddressesByUser(uid);\r\n    res.json(rows);\r\n  } catch (e) {\r\n    console.error('addresses me error:', e);\r\n    res.status(500).json({ error: 'Database error' });\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * [GET DEFAULT] GET /api/addresses/default\r\n * =======================================================*/\r\nrouter.get('/default', requireAuth, async (req, res) => {\r\n  try {\r\n    const uid = getUid(req);\r\n    if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n    const { rows } = await db.query(\r\n      `SELECT address_id, user_id, label, recipient_name, phone,\r\n              line1, line2, subdistrict, district, province,\r\n              postal_code, country, is_default, created_at\r\n         FROM user_addresses\r\n        WHERE user_id = $1 AND is_default = TRUE\r\n        LIMIT 1`,\r\n      [uid]\r\n    );\r\n    res.json(rows[0] || null);\r\n  } catch (e) {\r\n    console.error('addresses default error:', e);\r\n    res.status(500).json({ error: 'Database error' });\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * [CREATE] POST /api/addresses\r\n * =======================================================*/\r\nrouter.post('/', requireAuth, async (req, res) => {\r\n  const uid = getUid(req);\r\n  if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n\r\n  const payload = {\r\n    label:         san(req.body?.label),\r\n    recipient_name:san(req.body?.recipient_name),\r\n    phone:         san(req.body?.phone),\r\n    line1:         san(req.body?.line1),\r\n    line2:         san(req.body?.line2),\r\n    subdistrict:   san(req.body?.subdistrict),\r\n    district:      san(req.body?.district),\r\n    province:      san(req.body?.province),\r\n    postal_code:   san(req.body?.postal_code),\r\n    country:       normCountry(req.body?.country),\r\n    is_default:    req.body?.is_default === true,\r\n  };\r\n\r\n  if (!payload.line1) return res.status(400).json({ error: 'line1 required' });\r\n\r\n  const client = await getClientSafe();\r\n  const useTxn = !client.__noTxn;\r\n  try {\r\n    if (useTxn) await client.query('BEGIN');\r\n\r\n    const { rows: cnt } = await client.query(\r\n      `SELECT COUNT(*)::int AS c FROM user_addresses WHERE user_id = $1`,\r\n      [uid]\r\n    );\r\n    const isFirst = cnt[0].c === 0;\r\n    const makeDefault = payload.is_default || isFirst;\r\n\r\n    if (makeDefault) {\r\n      await client.query(\r\n        `UPDATE user_addresses SET is_default = FALSE\r\n          WHERE user_id = $1 AND is_default = TRUE`,\r\n        [uid]\r\n      );\r\n    }\r\n\r\n    const { rows } = await client.query(\r\n      `INSERT INTO user_addresses\r\n        (user_id, label, recipient_name, phone, line1, line2,\r\n         subdistrict, district, province, postal_code, country, is_default)\r\n       VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)\r\n       RETURNING *`,\r\n      [\r\n        uid,\r\n        payload.label, payload.recipient_name, payload.phone,\r\n        payload.line1, payload.line2,\r\n        payload.subdistrict, payload.district, payload.province,\r\n        payload.postal_code, payload.country,\r\n        makeDefault,\r\n      ]\r\n    );\r\n\r\n    if (useTxn) await client.query('COMMIT');\r\n    res.status(201).json(rows[0]);\r\n  } catch (e) {\r\n    if (useTxn) await client.query('ROLLBACK');\r\n    console.error('addresses create error:', e);\r\n    if (e.code === '23505') return res.status(409).json({ error: 'Default address already exists' });\r\n    res.status(500).json({ error: 'Database error' });\r\n  } finally {\r\n    client.release && client.release();\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * [UPDATE] PUT /api/addresses/:id\r\n * =======================================================*/\r\nrouter.put('/:id', requireAuth, async (req, res) => {\r\n  const id = Number(req.params.id);\r\n  if (!Number.isFinite(id)) return res.status(400).json({ error: 'Invalid id' });\r\n\r\n  const uid = getUid(req);\r\n  if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n\r\n  console.log('[PUT /addresses/:id]', { uid, id, body: req.body });\r\n\r\n  const P = {\r\n    label:          san(req.body?.label),\r\n    recipient_name: san(req.body?.recipient_name),\r\n    phone:          san(req.body?.phone),\r\n    line1:          san(req.body?.line1),\r\n    line2:          san(req.body?.line2),\r\n    subdistrict:    san(req.body?.subdistrict),\r\n    district:       san(req.body?.district),\r\n    province:       san(req.body?.province),\r\n    postal_code:    san(req.body?.postal_code),\r\n    country:        req.body?.country === undefined ? null : normCountry(req.body?.country),\r\n    is_default:     boolOrNull(req.body?.is_default),\r\n  };\r\n\r\n  const client = await getClientSafe();\r\n  const useTxn = !client.__noTxn;\r\n  try {\r\n    if (useTxn) await client.query('BEGIN');\r\n\r\n    const { rows: owned } = await client.query(\r\n      `SELECT is_default FROM user_addresses\r\n        WHERE address_id = $1 AND user_id = $2`,\r\n      [id, uid]\r\n    );\r\n    if (!owned[0]) {\r\n      if (useTxn) await client.query('ROLLBACK');\r\n      return res.status(404).json({ error: 'Not found' });\r\n    }\r\n\r\n    if (P.is_default === true) {\r\n      await client.query(\r\n        `UPDATE user_addresses SET is_default = FALSE\r\n          WHERE user_id = $1 AND is_default = TRUE`,\r\n        [uid]\r\n      );\r\n    }\r\n\r\n    const { rows } = await client.query(\r\n      `UPDATE user_addresses\r\n         SET label          = COALESCE($1, label),\r\n             recipient_name = COALESCE($2, recipient_name),\r\n             phone          = COALESCE($3, phone),\r\n             line1          = COALESCE($4, line1),\r\n             line2          = COALESCE($5, line2),\r\n             subdistrict    = COALESCE($6, subdistrict),\r\n             district       = COALESCE($7, district),\r\n             province       = COALESCE($8, province),\r\n             postal_code    = COALESCE($9, postal_code),\r\n             country        = COALESCE($10, country),\r\n             is_default     = COALESCE($11, is_default)\r\n       WHERE address_id = $12 AND user_id = $13\r\n       RETURNING *`,\r\n      [\r\n        P.label, P.recipient_name, P.phone,\r\n        P.line1, P.line2,\r\n        P.subdistrict, P.district, P.province,\r\n        P.postal_code, P.country,\r\n        P.is_default,\r\n        id, uid,\r\n      ]\r\n    );\r\n\r\n    if (useTxn) await client.query('COMMIT');\r\n    res.json(rows[0]);\r\n  } catch (e) {\r\n    if (useTxn) await client.query('ROLLBACK');\r\n    console.error('addresses update error:', e);\r\n    if (e.code === '23505') return res.status(409).json({ error: 'Default address already exists' });\r\n    res.status(500).json({ error: 'Database error' });\r\n  } finally {\r\n    client.release && client.release();\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * [SET DEFAULT] PATCH /api/addresses/:id/default\r\n * =======================================================*/\r\nrouter.patch('/:id/default', requireAuth, async (req, res) => {\r\n  const id = Number(req.params.id);\r\n  if (!Number.isFinite(id)) return res.status(400).json({ error: 'Invalid id' });\r\n\r\n  const uid = getUid(req);\r\n  if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n\r\n  console.log('[PATCH /addresses/:id/default]', { uid, id });\r\n\r\n  const client = await getClientSafe();\r\n  const useTxn = !client.__noTxn;\r\n  try {\r\n    if (useTxn) await client.query('BEGIN');\r\n\r\n    const { rows: owned } = await client.query(\r\n      `SELECT 1 FROM user_addresses WHERE address_id = $1 AND user_id = $2`,\r\n      [id, uid]\r\n    );\r\n    if (!owned.length) {\r\n      if (useTxn) await client.query('ROLLBACK');\r\n      return res.status(404).json({ error: 'Not found' });\r\n    }\r\n\r\n    await client.query(\r\n      `UPDATE user_addresses SET is_default = FALSE\r\n        WHERE user_id = $1 AND is_default = TRUE`,\r\n      [uid]\r\n    );\r\n    const { rows } = await client.query(\r\n      `UPDATE user_addresses\r\n          SET is_default = TRUE\r\n        WHERE address_id = $1 AND user_id = $2\r\n        RETURNING *`,\r\n      [id, uid]\r\n    );\r\n\r\n    if (useTxn) await client.query('COMMIT');\r\n    res.json(rows[0]);\r\n  } catch (e) {\r\n    if (useTxn) await client.query('ROLLBACK');\r\n    console.error('addresses set default error:', e);\r\n    res.status(500).json({ error: 'Database error' });\r\n  } finally {\r\n    client.release && client.release();\r\n  }\r\n});\r\n\r\n/* =========================================================\r\n * [DELETE] DELETE /api/addresses/:id\r\n * =======================================================*/\r\nrouter.delete('/:id', requireAuth, async (req, res) => {\r\n  const id = Number(req.params.id);\r\n  if (!Number.isFinite(id)) return res.status(400).json({ error: 'Invalid id' });\r\n\r\n  const uid = getUid(req);\r\n  if (!uid) return res.status(401).json({ error: 'Unauthorized' });\r\n\r\n  console.log('[DELETE /addresses/:id]', { uid, id });\r\n\r\n  const client = await getClientSafe();\r\n  const useTxn = !client.__noTxn;\r\n  try {\r\n    if (useTxn) await client.query('BEGIN');\r\n\r\n    const { rows: before } = await client.query(\r\n      `SELECT is_default FROM user_addresses\r\n        WHERE address_id = $1 AND user_id = $2`,\r\n      [id, uid]\r\n    );\r\n    if (!before[0]) {\r\n      if (useTxn) await client.query('ROLLBACK');\r\n      return res.status(404).json({ error: 'Not found' });\r\n    }\r\n    const wasDefault = !!before[0].is_default;\r\n\r\n    await client.query(\r\n      `DELETE FROM user_addresses WHERE address_id = $1 AND user_id = $2`,\r\n      [id, uid]\r\n    );\r\n\r\n    if (wasDefault) {\r\n      const { rows: remain } = await client.query(\r\n        `SELECT address_id\r\n           FROM user_addresses\r\n          WHERE user_id = $1\r\n          ORDER BY address_id DESC\r\n          LIMIT 1`,\r\n        [uid]\r\n      );\r\n      if (remain[0]) {\r\n        await client.query(\r\n          `UPDATE user_addresses\r\n              SET is_default = TRUE\r\n            WHERE address_id = $1 AND user_id = $2`,\r\n          [remain[0].address_id, uid]\r\n        );\r\n      }\r\n    }\r\n\r\n    if (useTxn) await client.query('COMMIT');\r\n    res.status(204).send();\r\n  } catch (e) {\r\n    if (useTxn) await client.query('ROLLBACK');\r\n    console.error('addresses delete error:', e);\r\n    res.status(500).json({ error: 'Database error' });\r\n  } finally {\r\n    client.release && client.release();\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n\r\n// ✅ CRUD ที่อยู่ผู้ใช้ + default (atomic transaction) + backfill จาก users.address\r\n// ✅ รองรับทั้ง req.user.sub และ req.user.user_id (กันเคส middleware ต่างกัน)\r\n// ✅ รองรับทั้ง db.getClient() และ db.pool.connect() (ถ้าไม่มี getClient)\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}