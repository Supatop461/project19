// src/auth/Register.js
// ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‚Üí POST /api/auth/register
// - ‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô (‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏û‡∏≤‡∏™‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏≤‡∏™‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î)
// - ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‚Üí login ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
//   ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /api/auth/login ‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö token
// - ‡πÄ‡∏ã‡πá‡∏ï Authorization header ‡πÉ‡∏´‡πâ axios ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å

import React, { useState } from 'react';
import { useNavigate, Link } from 'react-router-dom';
import axios from 'axios';

export default function Register() {
  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [form, setForm] = useState({
    full_name: '',
    email: '',
    password: '',
    confirm: '',
    phone: ''
  });

  // ‚úÖ state ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  const [showPw, setShowPw] = useState(false);     // toggle ‡πÇ‡∏ä‡∏ß‡πå/‡∏ã‡πà‡∏≠‡∏ô‡∏û‡∏≤‡∏™‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
  const [loading, setLoading] = useState(false);   // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏î‡∏ã‡πâ‡∏≥
  const [error, setError] = useState('');          // ‡πÅ‡∏™‡∏î‡∏á error ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤

  const nav = useNavigate();

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°
  const onChange = (e) => {
    const { name, value } = e.target;
    setForm(f => ({ ...f, [name]: value }));
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
  const validEmail = (v) => /\S+@\S+\.\S+/.test(v);

  async function handleSubmit(e) {
    e.preventDefault();
    setError('');

    // --- ‡∏ï‡∏£‡∏ß‡∏à‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ù‡∏±‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ---
    if (!form.full_name.trim())  return setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•');
    if (!validEmail(form.email)) return setError('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    if (form.password.length < 6) return setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    if (form.password !== form.confirm) return setError('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');

    setLoading(true);
    try {
      // üîπ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
      const res = await axios.post('/api/auth/register', {
        name: form.full_name,     // ‚ö†Ô∏è ‡∏ù‡∏±‡πà‡∏á backend ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ name ‡∏´‡∏£‡∏∑‡∏≠ full_name ‡∏Å‡πá‡πÑ‡∏î‡πâ
        full_name: form.full_name,
        email: form.email,
        password: form.password,
        phone: form.phone || undefined
      });

      // üîπ ‡∏Å‡∏£‡∏ì‡∏µ backend ‡∏™‡πà‡∏á token ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      let token = res?.data?.token;
      if (!token) {
        // üîπ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á token ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤: login ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏û‡∏≤‡∏™‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£
        const loginRes = await axios.post('/api/auth/login', {
          email: form.email,
          password: form.password
        });
        token = loginRes?.data?.token;
      }

      if (token) {
        localStorage.setItem('token', token);
        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        nav('/', { replace: true });
      } else {
        // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏û‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
        nav('/login', { replace: true });
      }
    } catch (err) {
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å backend ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      setError(err?.response?.data?.error || '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      setLoading(false);
    }
  }

  return (
    <div style={{ maxWidth: 420, margin: '24px auto', padding: 16 }}>
      <h1 style={{ marginBottom: 8 }}>‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h1>
      <p style={{ color: '#666', marginTop: 0 }}>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ */}
      {!!error && (
        <div style={{ background: '#fff1f0', border: '1px solid #ffa39e', color: '#cf1322', padding: 8, borderRadius: 8, marginBottom: 12 }}>
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit} style={{ display: 'grid', gap: 10 }}>
        <input
          name="full_name"
          placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
          value={form.full_name}
          onChange={onChange}
          autoComplete="name"
        />
        <input
          name="email"
          placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
          value={form.email}
          onChange={onChange}
          autoComplete="email"
          type="email"
        />
        <div style={{ display: 'grid', gap: 8 }}>
          <div style={{ display: 'flex', gap: 8 }}>
            <input
              style={{ flex: 1 }}
              name="password"
              placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)"
              value={form.password}
              onChange={onChange}
              type={showPw ? 'text' : 'password'}
              autoComplete="new-password"
            />
            <button type="button" onClick={() => setShowPw(v => !v)}>
              {showPw ? '‡∏ã‡πà‡∏≠‡∏ô' : '‡πÅ‡∏™‡∏î‡∏á'}
            </button>
          </div>

          <input
            name="confirm"
            placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
            value={form.confirm}
            onChange={onChange}
            type={showPw ? 'text' : 'password'}
            autoComplete="new-password"
          />
        </div>

        <input
          name="phone"
          placeholder="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
          value={form.phone}
          onChange={onChange}
          autoComplete="tel"
        />

        <button type="submit" disabled={loading}>
          {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£...' : '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'}
        </button>
      </form>

      <div style={{ marginTop: 12, fontSize: 14 }}>
        ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß? <Link to="/login">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Link>
      </div>
    </div>
  );
}
