// FRONTEND: src/pages/Login.js
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './Login.css';

export default function Login() {
  const navigate = useNavigate();

  const [form, setForm] = useState({ username: '', password: '', showPw: false });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å: baseURL ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ /api ‚Üí ‡πÉ‡∏ä‡πâ '/auth/login' ‡πÅ‡∏•‡∏∞ '/me'
  const baseEndsWithApi = (axios.defaults.baseURL || '').replace(/\/+$/, '').endsWith('/api');
  const LOGIN_PATH = baseEndsWithApi ? '/auth/login' : '/api/auth/login';
  const ME_PATH = baseEndsWithApi ? '/me' : '/api/me';

  const onChange = (e) => {
    const { name, value } = e.target;
    setForm((p) => ({ ...p, [name]: value }));
  };

  async function onSubmit(e) {
    e.preventDefault();
    setError('');

    const username = form.username.trim();
    const password = form.password.trim();
    if (!username || !password) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    try {
      setLoading(true);

      const res = await axios.post(LOGIN_PATH, {
        username,
        email: username, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        password,
      });

      // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå token ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
      const token =
        res.data?.token ||
        res.data?.accessToken ||
        res.data?.jwt ||
        res.data?.data?.token;

      if (!token) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');

      // ‡πÅ‡∏ô‡∏ö header ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const user = res.data?.user || res.data?.data?.user || {};
      const roleRaw = user.role || res.data?.role || 'customer';

      // map ‡∏ä‡∏∑‡πà‡∏≠
      let name =
        user.fullname ||
        user.full_name || // ‚Üê ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ
        [user.first_name, user.last_name].filter(Boolean).join(' ') ||
        user.username ||
        user.email ||
        username;

      // map ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
      const phone =
        user.phone ||
        user.phone_number ||
        '';

      // ‡∏ñ‡πâ‡∏≤ response ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí fallback ‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å /me
      if (!name || !phone) {
        try {
          const me = await axios.get(ME_PATH, {
            headers: { Authorization: `Bearer ${token}` },
          });
          const u = me.data?.user || me.data || {};
          if (!name) {
            name =
              u.fullname ||
              u.full_name ||
              [u.first_name, u.last_name].filter(Boolean).join(' ') ||
              u.username ||
              u.email ||
              username;
          }
        } catch {
          // ignore fallback error
        }
      }

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á localStorage
      const role = String(roleRaw).toLowerCase();
      localStorage.setItem('token', token);
      localStorage.setItem('role', role);
      localStorage.setItem('fullname', name || '');
      localStorage.setItem('phone', phone || '');
      if (user.email) localStorage.setItem('email', user.email);

      // ‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ auth/profile ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      window.dispatchEvent(new Event('auth:changed'));
      window.dispatchEvent(new Event('profile:changed'));

      // ‚úÖ ‡πÄ‡∏î‡πâ‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
      if (role.includes('admin')) {
        navigate('/admin/products', { replace: true }); // ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      } else {
        navigate('/home-user', { replace: true }); // ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      }
    } catch (e) {
      const status = e?.response?.status;
      const msg =
        status === 401
          ? '‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
          : status === 403
          ? '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
          : status === 404
          ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á /auth/login (‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ backend mount ‡∏ó‡∏µ‡πà /api/auth ‡πÅ‡∏•‡∏∞ baseURL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)'
          : e?.code === 'ERR_NETWORK'
          ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö backend ‡∏û‡∏≠‡∏£‡πå‡∏ï 3001)'
          : e?.response?.data?.error || e?.message || '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
      setError(msg);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className="login-page">
      {/* ‡∏ù‡∏±‡πà‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ó */}
      <aside className="promo">
        <div className="promo-inner">
          <div className="promo-badge">GARDEN PRODUCT ONLINE</div>
          <h1>üåø ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà ‡∏´‡∏à‡∏Å.‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå‡πÅ‡∏°‡πà‡πÇ‡∏à‡πâ üåø</h1>
          <p>‡∏°‡∏µ‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÑ‡∏°‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ä‡∏ô‡∏¥‡∏î ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß</p>
        </div>
      </aside>

      {/* ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô */}
      <main className="panel">
        <div className="login-card">
          <div className="brand">
            <Link to="/" className="brand-name">
              PRACH MAEJO
            </Link>
            <p className="brand-sub">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</p>
          </div>

          <form className="login-form" onSubmit={onSubmit} noValidate>
            <label className="field">
              <span className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏• / ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</span>
              <div className="input-wrap">
                <input
                  type="text"
                  name="username"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                  value={form.username}
                  onChange={onChange}
                  required
                />
              </div>
            </label>

            <label className="field">
              <span className="label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</span>
              <div className="input-wrap">
                <input
                  type={form.showPw ? 'text' : 'password'}
                  name="password"
                  placeholder="********"
                  value={form.password}
                  onChange={onChange}
                  required
                />
                <button
                  type="button"
                  className="pw-toggle"
                  onClick={() => setForm((p) => ({ ...p, showPw: !p.showPw }))}
                >
                  {form.showPw ? 'üëÅÔ∏è' : 'üôà'}
                </button>
              </div>
            </label>

            <div className="row-between">
              <span />
              <Link className="text-link" to="/reset-password">
                ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô?
              </Link>
            </div>

            {error && (
              <div className="form-error" role="alert">
                {error}
              </div>
            )}

            <button className="btn-primary" type="submit" disabled={loading}>
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‚Ä¶' : '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}
            </button>
          </form>
        </div>
      </main>
    </div>
  );
}
