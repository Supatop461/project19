// FRONTEND: src/pages/ResetPassword.js
import React, { useMemo, useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './ResetPassword.css'; // ‡πÉ‡∏ä‡πâ‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏î‡∏¥‡∏° ‡πÜ ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Login ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Å‡∏•‡∏°‡∏Å‡∏±‡∏ô

export default function ResetPassword() {
  const nav = useNavigate();
  const location = useLocation();

  // ‡∏≠‡πà‡∏≤‡∏ô query params
  const qs = useMemo(() => new URLSearchParams(location.search), [location.search]);
  const tokenFromUrl = qs.get('token') || qs.get('code') || qs.get('oobCode') || '';
  const emailFromUrl = qs.get('email') || '';

  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‚Üí ‡πÇ‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
  const mode = tokenFromUrl ? 'reset' : 'request';

  const [email, setEmail] = useState(emailFromUrl);
  const [password, setPassword] = useState('');
  const [confirm, setConfirm]   = useState('');
  const [showPw, setShowPw]     = useState(false);

  const [error, setError]   = useState('');
  const [notice, setNotice] = useState('');
  const [loading, setLoading] = useState(false);

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å path ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Login (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö baseURL ‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ /api)
  const endsWithApi = (axios.defaults.baseURL || '').replace(/\/+$/,'').endsWith('/api');
  const FORGOT_PATH = process.env.REACT_APP_FORGOT_PATH || (endsWithApi ? '/auth/forgot-password' : '/api/auth/forgot-password');
  const RESET_PATH  = process.env.REACT_APP_RESET_PATH  || (endsWithApi ? '/auth/reset-password' :  '/api/auth/reset-password');

  const isEmail = (v) => /\S+@\S+\.\S+/.test(String(v || '').trim());

  const submitRequest = async (e) => {
    e.preventDefault();
    setError('');
    setNotice('');

    if (!isEmail(email)) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    try {
      setLoading(true);
      await axios.post(FORGOT_PATH, { email: email.trim(), username: email.trim() });
      setNotice('‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏õ‡∏°)');
    } catch (err) {
      const msg =
        err?.response?.data?.error ||
        err?.response?.data?.message ||
        err?.message ||
        '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  const submitReset = async (e) => {
    e.preventDefault();
    setError('');
    setNotice('');

    if (password.length < 8) return setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
    if (password !== confirm) return setError('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');

    const token = tokenFromUrl;
    if (!token) return setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (token) ‡πÉ‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå');

    try {
      setLoading(true);
      // ‡∏™‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢ alias ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡πá‡∏Å‡πÄ‡∏≠‡∏ô‡∏î‡πå
      await axios.post(RESET_PATH, {
        token, code: token, oobCode: token,
        email: email || undefined,
        password,
        confirm_password: password,
        password_confirmation: password,
      });

      setNotice('‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‚Ä¶');
      setTimeout(() => nav('/login', { replace: true }), 1500);
    } catch (err) {
      const msg =
        err?.response?.data?.error ||
        err?.response?.data?.message ||
        err?.message ||
        '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="login-page">
      <main className="panel" style={{ width: '100%' }}>
        <div className="login-card" style={{ maxWidth: 520 }}>
          <div className="brand">
            <Link to="/" className="brand-name">PRACH MAEJO</Link>
            <p className="brand-sub">
              {mode === 'request' ? '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' : '‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'}
            </p>
          </div>

          {mode === 'request' ? (
            <form className="login-form" onSubmit={submitRequest} noValidate>
              <label className="field">
                <span className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£</span>
                <div className="input-wrap">
                  <input
                    type="email"
                    placeholder="your@email.com"
                    value={email}
                    onChange={(e)=>setEmail(e.target.value)}
                    required
                  />
                </div>
              </label>

              {error && <div className="form-error" role="alert">{error}</div>}
              {notice && <div className="form-success" role="status">{notice}</div>}

              <button className="btn-primary" type="submit" disabled={loading}>
                {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‚Ä¶' : '‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'}
              </button>

              <div className="row-between" style={{ marginTop: 10 }}>
                <Link className="text-link" to="/login">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Link>
                <span />
              </div>
            </form>
          ) : (
            <form className="login-form" onSubmit={submitReset} noValidate>
              {/* ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏ô URL (‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ) */}
              <label className="field">
                <span className="label">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</span>
                <div className="input-wrap">
                  <input
                    type="email"
                    placeholder="your@email.com"
                    value={email}
                    onChange={(e)=>setEmail(e.target.value)}
                  />
                </div>
              </label>

              <label className="field">
                <span className="label">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
                <div className="input-wrap">
                  <input
                    type={showPw ? 'text' : 'password'}
                    placeholder="‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£"
                    value={password}
                    onChange={(e)=>setPassword(e.target.value)}
                    required
                  />
                  <button
                    type="button"
                    className="pw-toggle"
                    onClick={() => setShowPw(s => !s)}
                    aria-label="‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
                  >
                    {showPw ? 'üôà' : 'üëÅÔ∏è'}
                  </button>
                </div>
              </label>

              <label className="field">
                <span className="label">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</span>
                <div className="input-wrap">
                  <input
                    type={showPw ? 'text' : 'password'}
                    placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ã‡πâ‡∏≥‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
                    value={confirm}
                    onChange={(e)=>setConfirm(e.target.value)}
                    required
                  />
                </div>
              </label>

              {error && <div className="form-error" role="alert">{error}</div>}
              {notice && <div className="form-success" role="status">{notice}</div>}

              <button className="btn-primary" type="submit" disabled={loading}>
                {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‚Ä¶' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'}
              </button>

              <div className="row-between" style={{ marginTop: 10 }}>
                <Link className="text-link" to="/login">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</Link>
                <span />
              </div>
            </form>
          )}
        </div>
      </main>
    </div>
  );
}
